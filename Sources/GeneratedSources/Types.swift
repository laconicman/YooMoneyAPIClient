// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Список платежей
    ///
    /// Возвращает список платежей с возможностью фильтрации и постраничной выборки.
    ///
    /// - Remark: HTTP `GET /payments`.
    /// - Remark: Generated from `#/paths//payments/get(getPaymentsList)`.
    func getPaymentsList(_ input: Operations.GetPaymentsList.Input) async throws -> Operations.GetPaymentsList.Output
    /// Создание платежа
    ///
    /// Чтобы принять оплату, необходимо создать объект платежа — `Payment`. Он содержит всю необходимую информацию для проведения оплаты (сумму, валюту и статус). У платежа линейный жизненный цикл, он последовательно переходит из статуса в статус.
    ///
    ///
    /// - Remark: HTTP `POST /payments`.
    /// - Remark: Generated from `#/paths//payments/post(createPayment)`.
    func createPayment(_ input: Operations.CreatePayment.Input) async throws -> Operations.CreatePayment.Output
    /// Информация о платеже
    ///
    /// Возвращает информацию о платеже по его уникальному идентификатору.
    ///
    ///
    /// - Remark: HTTP `GET /payments/{payment_id}`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/get(getPayment)`.
    func getPayment(_ input: Operations.GetPayment.Input) async throws -> Operations.GetPayment.Output
    /// Подтверждение платежа
    ///
    /// Подтверждает вашу готовность принять платеж. После подтверждения платеж перейдет в статус `succeeded`. Это значит, что вы можете выдать товар или оказать услугу пользователю.
    ///
    /// Подтвердить можно только платеж в статусе `waiting_for_capture` и только в течение определенного времени (зависит от способа оплаты). Если вы не подтвердите платеж в отведенное время, он автоматически перейдет в статус `canceled`, и деньги вернутся пользователю.
    ///
    ///
    /// - Remark: HTTP `POST /payments/{payment_id}/capture`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/capture/post(capturePayment)`.
    func capturePayment(_ input: Operations.CapturePayment.Input) async throws -> Operations.CapturePayment.Output
    /// Отмена платежа
    ///
    /// Отменяет платеж, находящийся в статусе `waiting_for_capture`. 
    /// Отмена платежа невозможна, если платеж уже подтвержден.
    ///
    ///
    /// - Remark: HTTP `POST /payments/{payment_id}/cancel`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/cancel/post(cancelPayment)`.
    func cancelPayment(_ input: Operations.CancelPayment.Input) async throws -> Operations.CancelPayment.Output
    /// Список возвратов
    ///
    /// Возвращает список возвратов с возможностью фильтрации и постраничной выборки.
    ///
    /// - Remark: HTTP `GET /refunds`.
    /// - Remark: Generated from `#/paths//refunds/get(getRefundsList)`.
    func getRefundsList(_ input: Operations.GetRefundsList.Input) async throws -> Operations.GetRefundsList.Output
    /// Создание возврата
    ///
    /// Создает возврат платежа — `Refund`. Возвращает успешно завершенный платеж по уникальному идентификатору платежа.
    ///
    ///
    /// - Remark: HTTP `POST /refunds`.
    /// - Remark: Generated from `#/paths//refunds/post(createRefund)`.
    func createRefund(_ input: Operations.CreateRefund.Input) async throws -> Operations.CreateRefund.Output
    /// Информация о возврате
    ///
    /// Возвращает информацию о возврате по его уникальному идентификатору.
    ///
    ///
    /// - Remark: HTTP `GET /refunds/{refund_id}`.
    /// - Remark: Generated from `#/paths//refunds/{refund_id}/get(getRefund)`.
    func getRefund(_ input: Operations.GetRefund.Input) async throws -> Operations.GetRefund.Output
    /// Список чеков
    ///
    /// Возвращает список чеков с возможностью фильтрации и постраничной выборки.
    ///
    /// Список чеков возвращается отсортированным по времени создания в порядке убывания.
    /// Если результатов больше, чем задано в параметре limit, список будет выводиться фрагментами.
    /// В этом случае в ответе на запрос вернется фрагмент списка и параметр next_cursor с указателем на следующий фрагмент.
    ///
    ///
    /// - Remark: HTTP `GET /receipts`.
    /// - Remark: Generated from `#/paths//receipts/get(getReceiptsList)`.
    func getReceiptsList(_ input: Operations.GetReceiptsList.Input) async throws -> Operations.GetReceiptsList.Output
    /// Создание чека
    ///
    /// Создает чек для указанного платежа или возврата.
    ///
    /// Чек можно создать только при наличии успешного платежа или возврата.
    /// Если вы создаете чек для платежа, то передайте параметр payment_id.
    /// Если для возврата — refund_id.
    ///
    ///
    /// - Remark: HTTP `POST /receipts`.
    /// - Remark: Generated from `#/paths//receipts/post(createReceipt)`.
    func createReceipt(_ input: Operations.CreateReceipt.Input) async throws -> Operations.CreateReceipt.Output
    /// Информация о чеке
    ///
    /// Возвращает информацию о чеке по его уникальному идентификатору.
    ///
    /// Выдает информацию о чеке, включая его статус, данные о товарах, получателе и налогах.
    ///
    ///
    /// - Remark: HTTP `GET /receipts/{receipt_id}`.
    /// - Remark: Generated from `#/paths//receipts/{receipt_id}/get(getReceipt)`.
    func getReceipt(_ input: Operations.GetReceipt.Input) async throws -> Operations.GetReceipt.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Список платежей
    ///
    /// Возвращает список платежей с возможностью фильтрации и постраничной выборки.
    ///
    /// - Remark: HTTP `GET /payments`.
    /// - Remark: Generated from `#/paths//payments/get(getPaymentsList)`.
    public func getPaymentsList(
        query: Operations.GetPaymentsList.Input.Query = .init(),
        headers: Operations.GetPaymentsList.Input.Headers = .init()
    ) async throws -> Operations.GetPaymentsList.Output {
        try await getPaymentsList(Operations.GetPaymentsList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Создание платежа
    ///
    /// Чтобы принять оплату, необходимо создать объект платежа — `Payment`. Он содержит всю необходимую информацию для проведения оплаты (сумму, валюту и статус). У платежа линейный жизненный цикл, он последовательно переходит из статуса в статус.
    ///
    ///
    /// - Remark: HTTP `POST /payments`.
    /// - Remark: Generated from `#/paths//payments/post(createPayment)`.
    public func createPayment(
        headers: Operations.CreatePayment.Input.Headers = .init(),
        body: Operations.CreatePayment.Input.Body
    ) async throws -> Operations.CreatePayment.Output {
        try await createPayment(Operations.CreatePayment.Input(
            headers: headers,
            body: body
        ))
    }
    /// Информация о платеже
    ///
    /// Возвращает информацию о платеже по его уникальному идентификатору.
    ///
    ///
    /// - Remark: HTTP `GET /payments/{payment_id}`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/get(getPayment)`.
    public func getPayment(
        path: Operations.GetPayment.Input.Path,
        headers: Operations.GetPayment.Input.Headers = .init()
    ) async throws -> Operations.GetPayment.Output {
        try await getPayment(Operations.GetPayment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Подтверждение платежа
    ///
    /// Подтверждает вашу готовность принять платеж. После подтверждения платеж перейдет в статус `succeeded`. Это значит, что вы можете выдать товар или оказать услугу пользователю.
    ///
    /// Подтвердить можно только платеж в статусе `waiting_for_capture` и только в течение определенного времени (зависит от способа оплаты). Если вы не подтвердите платеж в отведенное время, он автоматически перейдет в статус `canceled`, и деньги вернутся пользователю.
    ///
    ///
    /// - Remark: HTTP `POST /payments/{payment_id}/capture`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/capture/post(capturePayment)`.
    public func capturePayment(
        path: Operations.CapturePayment.Input.Path,
        headers: Operations.CapturePayment.Input.Headers = .init(),
        body: Operations.CapturePayment.Input.Body? = nil
    ) async throws -> Operations.CapturePayment.Output {
        try await capturePayment(Operations.CapturePayment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Отмена платежа
    ///
    /// Отменяет платеж, находящийся в статусе `waiting_for_capture`. 
    /// Отмена платежа невозможна, если платеж уже подтвержден.
    ///
    ///
    /// - Remark: HTTP `POST /payments/{payment_id}/cancel`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/cancel/post(cancelPayment)`.
    public func cancelPayment(
        path: Operations.CancelPayment.Input.Path,
        headers: Operations.CancelPayment.Input.Headers = .init()
    ) async throws -> Operations.CancelPayment.Output {
        try await cancelPayment(Operations.CancelPayment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Список возвратов
    ///
    /// Возвращает список возвратов с возможностью фильтрации и постраничной выборки.
    ///
    /// - Remark: HTTP `GET /refunds`.
    /// - Remark: Generated from `#/paths//refunds/get(getRefundsList)`.
    public func getRefundsList(
        query: Operations.GetRefundsList.Input.Query = .init(),
        headers: Operations.GetRefundsList.Input.Headers = .init()
    ) async throws -> Operations.GetRefundsList.Output {
        try await getRefundsList(Operations.GetRefundsList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Создание возврата
    ///
    /// Создает возврат платежа — `Refund`. Возвращает успешно завершенный платеж по уникальному идентификатору платежа.
    ///
    ///
    /// - Remark: HTTP `POST /refunds`.
    /// - Remark: Generated from `#/paths//refunds/post(createRefund)`.
    public func createRefund(
        headers: Operations.CreateRefund.Input.Headers = .init(),
        body: Operations.CreateRefund.Input.Body
    ) async throws -> Operations.CreateRefund.Output {
        try await createRefund(Operations.CreateRefund.Input(
            headers: headers,
            body: body
        ))
    }
    /// Информация о возврате
    ///
    /// Возвращает информацию о возврате по его уникальному идентификатору.
    ///
    ///
    /// - Remark: HTTP `GET /refunds/{refund_id}`.
    /// - Remark: Generated from `#/paths//refunds/{refund_id}/get(getRefund)`.
    public func getRefund(
        path: Operations.GetRefund.Input.Path,
        headers: Operations.GetRefund.Input.Headers = .init()
    ) async throws -> Operations.GetRefund.Output {
        try await getRefund(Operations.GetRefund.Input(
            path: path,
            headers: headers
        ))
    }
    /// Список чеков
    ///
    /// Возвращает список чеков с возможностью фильтрации и постраничной выборки.
    ///
    /// Список чеков возвращается отсортированным по времени создания в порядке убывания.
    /// Если результатов больше, чем задано в параметре limit, список будет выводиться фрагментами.
    /// В этом случае в ответе на запрос вернется фрагмент списка и параметр next_cursor с указателем на следующий фрагмент.
    ///
    ///
    /// - Remark: HTTP `GET /receipts`.
    /// - Remark: Generated from `#/paths//receipts/get(getReceiptsList)`.
    public func getReceiptsList(
        query: Operations.GetReceiptsList.Input.Query = .init(),
        headers: Operations.GetReceiptsList.Input.Headers = .init()
    ) async throws -> Operations.GetReceiptsList.Output {
        try await getReceiptsList(Operations.GetReceiptsList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Создание чека
    ///
    /// Создает чек для указанного платежа или возврата.
    ///
    /// Чек можно создать только при наличии успешного платежа или возврата.
    /// Если вы создаете чек для платежа, то передайте параметр payment_id.
    /// Если для возврата — refund_id.
    ///
    ///
    /// - Remark: HTTP `POST /receipts`.
    /// - Remark: Generated from `#/paths//receipts/post(createReceipt)`.
    public func createReceipt(
        headers: Operations.CreateReceipt.Input.Headers = .init(),
        body: Operations.CreateReceipt.Input.Body
    ) async throws -> Operations.CreateReceipt.Output {
        try await createReceipt(Operations.CreateReceipt.Input(
            headers: headers,
            body: body
        ))
    }
    /// Информация о чеке
    ///
    /// Возвращает информацию о чеке по его уникальному идентификатору.
    ///
    /// Выдает информацию о чеке, включая его статус, данные о товарах, получателе и налогах.
    ///
    ///
    /// - Remark: HTTP `GET /receipts/{receipt_id}`.
    /// - Remark: Generated from `#/paths//receipts/{receipt_id}/get(getReceipt)`.
    public func getReceipt(
        path: Operations.GetReceipt.Input.Path,
        headers: Operations.GetReceipt.Input.Headers = .init()
    ) async throws -> Operations.GetReceipt.Output {
        try await getReceipt(Operations.GetReceipt.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// YooMoney API Production Server
    public enum Server1 {
        /// YooMoney API Production Server
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.yookassa.ru/v3",
                variables: []
            )
        }
    }
    /// YooMoney API Production Server
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.yookassa.ru/v3",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Сумма.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Amount`.
        public struct Amount: Codable, Hashable, Sendable {
            /// Сумма в выбранной валюте. Всегда дробное значение. Разделитель дробной части — точка, разделитель тысяч отсутствует. Количество знаков после точки зависит от выбранной валюты.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Amount/value`.
            public var value: Swift.String
            /// Трехбуквенный код валюты в формате ISO-4217. Пример: `RUB`. Должен соответствовать валюте субаккаунта (`recipient.gateway_id`), если вы разделяете потоки платежей, и валюте аккаунта (shopId в личном кабинете), если не разделяете.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Amount/currency`.
            public var currency: Swift.String
            /// Creates a new `Amount`.
            ///
            /// - Parameters:
            ///   - value: Сумма в выбранной валюте. Всегда дробное значение. Разделитель дробной части — точка, разделитель тысяч отсутствует. Количество знаков после точки зависит от выбранной валюты.
            ///   - currency: Трехбуквенный код валюты в формате ISO-4217. Пример: `RUB`. Должен соответствовать валюте субаккаунта (`recipient.gateway_id`), если вы разделяете потоки платежей, и валюте аккаунта (shopId в личном кабинете), если не разделяете.
            public init(
                value: Swift.String,
                currency: Swift.String
            ) {
                self.value = value
                self.currency = currency
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case currency
            }
        }
        /// Статус платежа. Возможные значения:
        /// - `pending` — платеж создан и ожидает действий от плательщика;
        /// - `waiting_for_capture` — платеж оплачен, деньги авторизованы и ожидают списания;
        /// - `succeeded` — платеж успешно завершен;
        /// - `canceled` — платеж отменен.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PaymentStatus`.
        @frozen public enum PaymentStatus: String, Codable, Hashable, Sendable, CaseIterable {
            case pending = "pending"
            case waitingForCapture = "waiting_for_capture"
            case succeeded = "succeeded"
            case canceled = "canceled"
        }
        /// Код способа оплаты. Возможные значения:
        /// - `bank_card` — банковская карта;
        /// - `yoo_money` — кошелек ЮMoney;
        /// - `sberbank` — SberPay;
        /// - `qiwi` — QIWI Кошелек;
        /// - `webmoney` — Webmoney;
        /// - `alfabank` — Альфа-Клик;
        /// - `tinkoff_bank` — Тинькофф Банк;
        /// - `cash` — наличные;
        /// - `b2b_sberbank` — Сбербанк Бизнес Онлайн;
        /// - `mobile_balance` — баланс мобильного телефона;
        /// - `apple_pay` — Apple Pay;
        /// - `google_pay` — Google Pay;
        /// - `installments` — рассрочка;
        /// - `sbp` — Система быстрых платежей.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PaymentMethodType`.
        @frozen public enum PaymentMethodType: String, Codable, Hashable, Sendable, CaseIterable {
            case bankCard = "bank_card"
            case yooMoney = "yoo_money"
            case sberbank = "sberbank"
            case qiwi = "qiwi"
            case webmoney = "webmoney"
            case alfabank = "alfabank"
            case tinkoffBank = "tinkoff_bank"
            case cash = "cash"
            case b2bSberbank = "b2b_sberbank"
            case mobileBalance = "mobile_balance"
            case applePay = "apple_pay"
            case googlePay = "google_pay"
            case installments = "installments"
            case sbp = "sbp"
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodBase`.
        public struct PaymentMethodBase: Codable, Hashable, Sendable {
            /// Код способа оплаты. Возможные значения:
            /// - `bank_card` — банковская карта;
            /// - `yoo_money` — кошелек ЮMoney;
            /// - `sberbank` — SberPay;
            /// - `qiwi` — QIWI Кошелек;
            /// - `webmoney` — Webmoney;
            /// - `alfabank` — Альфа-Клик;
            /// - `tinkoff_bank` — Тинькофф Банк;
            /// - `cash` — наличные;
            /// - `b2b_sberbank` — Сбербанк Бизнес Онлайн;
            /// - `mobile_balance` — баланс мобильного телефона;
            /// - `apple_pay` — Apple Pay;
            /// - `google_pay` — Google Pay;
            /// - `installments` — рассрочка;
            /// - `sbp` — Система быстрых платежей.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBase/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bankCard = "bank_card"
                case yooMoney = "yoo_money"
                case sberbank = "sberbank"
                case qiwi = "qiwi"
                case webmoney = "webmoney"
                case alfabank = "alfabank"
                case tinkoffBank = "tinkoff_bank"
                case cash = "cash"
                case b2bSberbank = "b2b_sberbank"
                case mobileBalance = "mobile_balance"
                case applePay = "apple_pay"
                case googlePay = "google_pay"
                case installments = "installments"
                case sbp = "sbp"
            }
            /// Код способа оплаты. Возможные значения:
            /// - `bank_card` — банковская карта;
            /// - `yoo_money` — кошелек ЮMoney;
            /// - `sberbank` — SberPay;
            /// - `qiwi` — QIWI Кошелек;
            /// - `webmoney` — Webmoney;
            /// - `alfabank` — Альфа-Клик;
            /// - `tinkoff_bank` — Тинькофф Банк;
            /// - `cash` — наличные;
            /// - `b2b_sberbank` — Сбербанк Бизнес Онлайн;
            /// - `mobile_balance` — баланс мобильного телефона;
            /// - `apple_pay` — Apple Pay;
            /// - `google_pay` — Google Pay;
            /// - `installments` — рассрочка;
            /// - `sbp` — Система быстрых платежей.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBase/type`.
            public var _type: Components.Schemas.PaymentMethodBase._TypePayload
            /// Идентификатор записи о сохраненных платежных данных.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBase/id`.
            public var id: Swift.String?
            /// Признак сохраненных платежных данных. Значение true говорит о том, что данные были сохранены для повторного использования.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBase/saved`.
            public var saved: Swift.Bool?
            /// Название способа оплаты.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBase/title`.
            public var title: Swift.String?
            /// Статус платежных данных. Возможные значения:
            /// - `pending` — данные сохранены для повторного использования, но пока не использовались;
            /// - `active` — данные использовались для успешного платежа;
            /// - `inactive` — не удалось провести платеж с этими данными.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBase/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pending = "pending"
                case active = "active"
                case inactive = "inactive"
            }
            /// Статус платежных данных. Возможные значения:
            /// - `pending` — данные сохранены для повторного использования, но пока не использовались;
            /// - `active` — данные использовались для успешного платежа;
            /// - `inactive` — не удалось провести платеж с этими данными.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBase/status`.
            public var status: Components.Schemas.PaymentMethodBase.StatusPayload?
            /// Creates a new `PaymentMethodBase`.
            ///
            /// - Parameters:
            ///   - _type: Код способа оплаты. Возможные значения:
            ///   - id: Идентификатор записи о сохраненных платежных данных.
            ///   - saved: Признак сохраненных платежных данных. Значение true говорит о том, что данные были сохранены для повторного использования.
            ///   - title: Название способа оплаты.
            ///   - status: Статус платежных данных. Возможные значения:
            public init(
                _type: Components.Schemas.PaymentMethodBase._TypePayload,
                id: Swift.String? = nil,
                saved: Swift.Bool? = nil,
                title: Swift.String? = nil,
                status: Components.Schemas.PaymentMethodBase.StatusPayload? = nil
            ) {
                self._type = _type
                self.id = id
                self.saved = saved
                self.title = title
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case saved
                case title
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethod`.
        @frozen public enum PaymentMethod: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodAlfabank`.
            case alfabank(Components.Schemas.PaymentMethodAlfabank)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodApplePay`.
            case applePay(Components.Schemas.PaymentMethodApplePay)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodB2BSberbank`.
            case b2bSberbank(Components.Schemas.PaymentMethodB2BSberbank)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodBankCard`.
            case bankCard(Components.Schemas.PaymentMethodBankCard)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodCash`.
            case cash(Components.Schemas.PaymentMethodCash)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodGooglePay`.
            case googlePay(Components.Schemas.PaymentMethodGooglePay)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodInstallments`.
            case installments(Components.Schemas.PaymentMethodInstallments)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodMobileBalance`.
            case mobileBalance(Components.Schemas.PaymentMethodMobileBalance)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodQiwi`.
            case qiwi(Components.Schemas.PaymentMethodQiwi)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodSberbank`.
            case sberbank(Components.Schemas.PaymentMethodSberbank)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodSBP`.
            case sbp(Components.Schemas.PaymentMethodSBP)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodTinkoffBank`.
            case tinkoffBank(Components.Schemas.PaymentMethodTinkoffBank)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodWebmoney`.
            case webmoney(Components.Schemas.PaymentMethodWebmoney)
            /// - Remark: Generated from `#/components/schemas/PaymentMethod/PaymentMethodYooMoney`.
            case yooMoney(Components.Schemas.PaymentMethodYooMoney)
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                switch discriminator {
                case "alfabank":
                    self = .alfabank(try .init(from: decoder))
                case "apple_pay":
                    self = .applePay(try .init(from: decoder))
                case "b2b_sberbank":
                    self = .b2bSberbank(try .init(from: decoder))
                case "bank_card":
                    self = .bankCard(try .init(from: decoder))
                case "cash":
                    self = .cash(try .init(from: decoder))
                case "google_pay":
                    self = .googlePay(try .init(from: decoder))
                case "installments":
                    self = .installments(try .init(from: decoder))
                case "mobile_balance":
                    self = .mobileBalance(try .init(from: decoder))
                case "qiwi":
                    self = .qiwi(try .init(from: decoder))
                case "sberbank":
                    self = .sberbank(try .init(from: decoder))
                case "sbp":
                    self = .sbp(try .init(from: decoder))
                case "tinkoff_bank":
                    self = .tinkoffBank(try .init(from: decoder))
                case "webmoney":
                    self = .webmoney(try .init(from: decoder))
                case "yoo_money":
                    self = .yooMoney(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys._type,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .alfabank(value):
                    try value.encode(to: encoder)
                case let .applePay(value):
                    try value.encode(to: encoder)
                case let .b2bSberbank(value):
                    try value.encode(to: encoder)
                case let .bankCard(value):
                    try value.encode(to: encoder)
                case let .cash(value):
                    try value.encode(to: encoder)
                case let .googlePay(value):
                    try value.encode(to: encoder)
                case let .installments(value):
                    try value.encode(to: encoder)
                case let .mobileBalance(value):
                    try value.encode(to: encoder)
                case let .qiwi(value):
                    try value.encode(to: encoder)
                case let .sberbank(value):
                    try value.encode(to: encoder)
                case let .sbp(value):
                    try value.encode(to: encoder)
                case let .tinkoffBank(value):
                    try value.encode(to: encoder)
                case let .webmoney(value):
                    try value.encode(to: encoder)
                case let .yooMoney(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard`.
        public struct PaymentMethodBankCard: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card`.
                public struct CardPayload: Codable, Hashable, Sendable {
                    /// Первые 6 цифр номера карты (BIN). При оплате картой, сохраненной в ЮKassa и других сервисах, переданный BIN может не соответствовать значениям `last4`, `expiry_year`, `expiry_month`.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/first6`.
                    public var first6: Swift.String?
                    /// Последние 4 цифры номера карты.
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/last4`.
                    public var last4: Swift.String
                    /// Срок действия, месяц, MM.
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/expiry_month`.
                    public var expiryMonth: Swift.String
                    /// Срок действия, год, YYYY.
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/expiry_year`.
                    public var expiryYear: Swift.String
                    /// Тип банковской карты. Возможные значения: `MasterCard` (для карт Mastercard и Maestro), `Visa` (для карт Visa и Visa Electron), `Mir`, `UnionPay`, `JCB`, `AmericanExpress`, `DinersClub`, `DiscoverCard`, `InstaPayment`, `InstaPaymentTM`, `Laser`, `Dankort`, `Solo`, `Switch` и `Unknown`.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/card_type`.
                    @frozen public enum CardTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case masterCard = "MasterCard"
                        case visa = "Visa"
                        case mir = "Mir"
                        case unionPay = "UnionPay"
                        case jcb = "JCB"
                        case americanExpress = "AmericanExpress"
                        case dinersClub = "DinersClub"
                        case discoverCard = "DiscoverCard"
                        case instaPayment = "InstaPayment"
                        case instaPaymentTM = "InstaPaymentTM"
                        case laser = "Laser"
                        case dankort = "Dankort"
                        case solo = "Solo"
                        case _switch = "Switch"
                        case unknown = "Unknown"
                    }
                    /// Тип банковской карты. Возможные значения: `MasterCard` (для карт Mastercard и Maestro), `Visa` (для карт Visa и Visa Electron), `Mir`, `UnionPay`, `JCB`, `AmericanExpress`, `DinersClub`, `DiscoverCard`, `InstaPayment`, `InstaPaymentTM`, `Laser`, `Dankort`, `Solo`, `Switch` и `Unknown`.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/card_type`.
                    public var cardType: Components.Schemas.PaymentMethodBankCard.Value2Payload.CardPayload.CardTypePayload
                    /// Карточный продукт платежной системы, с которым ассоциирована банковская карта. Например, карточные продукты платежной системы Мир: `Mir Classic`, `Mir Classic Credit`, `MIR Privilege Plus` и другие.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/card_product`.
                    public struct CardProductPayload: Codable, Hashable, Sendable {
                        /// Код карточного продукта.
                        ///
                        /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/card_product/code`.
                        public var code: Swift.String?
                        /// Название карточного продукта.
                        ///
                        /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/card_product/name`.
                        public var name: Swift.String?
                        /// Creates a new `CardProductPayload`.
                        ///
                        /// - Parameters:
                        ///   - code: Код карточного продукта.
                        ///   - name: Название карточного продукта.
                        public init(
                            code: Swift.String? = nil,
                            name: Swift.String? = nil
                        ) {
                            self.code = code
                            self.name = name
                        }
                        public enum CodingKeys: String, CodingKey {
                            case code
                            case name
                        }
                    }
                    /// Карточный продукт платежной системы, с которым ассоциирована банковская карта. Например, карточные продукты платежной системы Мир: `Mir Classic`, `Mir Classic Credit`, `MIR Privilege Plus` и другие.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/card_product`.
                    public var cardProduct: Components.Schemas.PaymentMethodBankCard.Value2Payload.CardPayload.CardProductPayload?
                    /// Код страны, в которой выпущена карта. Передается в формате ISO-3166 alpha-2.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/issuer_country`.
                    public var issuerCountry: Swift.String?
                    /// Наименование банка, выпустившего карту.
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/issuer_name`.
                    public var issuerName: Swift.String?
                    /// Источник данных банковской карты. Возможные значения: `mir_pay`, `apple_pay`, `google_pay`. Присутствует, если пользователь при оплате выбрал карту, сохраненную в Mir Pay, Apple Pay или Google Pay.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/source`.
                    @frozen public enum SourcePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case mirPay = "mir_pay"
                        case applePay = "apple_pay"
                        case googlePay = "google_pay"
                    }
                    /// Источник данных банковской карты. Возможные значения: `mir_pay`, `apple_pay`, `google_pay`. Присутствует, если пользователь при оплате выбрал карту, сохраненную в Mir Pay, Apple Pay или Google Pay.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card/source`.
                    public var source: Components.Schemas.PaymentMethodBankCard.Value2Payload.CardPayload.SourcePayload?
                    /// Creates a new `CardPayload`.
                    ///
                    /// - Parameters:
                    ///   - first6: Первые 6 цифр номера карты (BIN). При оплате картой, сохраненной в ЮKassa и других сервисах, переданный BIN может не соответствовать значениям `last4`, `expiry_year`, `expiry_month`.
                    ///   - last4: Последние 4 цифры номера карты.
                    ///   - expiryMonth: Срок действия, месяц, MM.
                    ///   - expiryYear: Срок действия, год, YYYY.
                    ///   - cardType: Тип банковской карты. Возможные значения: `MasterCard` (для карт Mastercard и Maestro), `Visa` (для карт Visa и Visa Electron), `Mir`, `UnionPay`, `JCB`, `AmericanExpress`, `DinersClub`, `DiscoverCard`, `InstaPayment`, `InstaPaymentTM`, `Laser`, `Dankort`, `Solo`, `Switch` и `Unknown`.
                    ///   - cardProduct: Карточный продукт платежной системы, с которым ассоциирована банковская карта. Например, карточные продукты платежной системы Мир: `Mir Classic`, `Mir Classic Credit`, `MIR Privilege Plus` и другие.
                    ///   - issuerCountry: Код страны, в которой выпущена карта. Передается в формате ISO-3166 alpha-2.
                    ///   - issuerName: Наименование банка, выпустившего карту.
                    ///   - source: Источник данных банковской карты. Возможные значения: `mir_pay`, `apple_pay`, `google_pay`. Присутствует, если пользователь при оплате выбрал карту, сохраненную в Mir Pay, Apple Pay или Google Pay.
                    public init(
                        first6: Swift.String? = nil,
                        last4: Swift.String,
                        expiryMonth: Swift.String,
                        expiryYear: Swift.String,
                        cardType: Components.Schemas.PaymentMethodBankCard.Value2Payload.CardPayload.CardTypePayload,
                        cardProduct: Components.Schemas.PaymentMethodBankCard.Value2Payload.CardPayload.CardProductPayload? = nil,
                        issuerCountry: Swift.String? = nil,
                        issuerName: Swift.String? = nil,
                        source: Components.Schemas.PaymentMethodBankCard.Value2Payload.CardPayload.SourcePayload? = nil
                    ) {
                        self.first6 = first6
                        self.last4 = last4
                        self.expiryMonth = expiryMonth
                        self.expiryYear = expiryYear
                        self.cardType = cardType
                        self.cardProduct = cardProduct
                        self.issuerCountry = issuerCountry
                        self.issuerName = issuerName
                        self.source = source
                    }
                    public enum CodingKeys: String, CodingKey {
                        case first6
                        case last4
                        case expiryMonth = "expiry_month"
                        case expiryYear = "expiry_year"
                        case cardType = "card_type"
                        case cardProduct = "card_product"
                        case issuerCountry = "issuer_country"
                        case issuerName = "issuer_name"
                        case source
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2/card`.
                public var card: Components.Schemas.PaymentMethodBankCard.Value2Payload.CardPayload?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - card:
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    card: Components.Schemas.PaymentMethodBankCard.Value2Payload.CardPayload? = nil
                ) {
                    self._type = _type
                    self.card = card
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case card
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodBankCard/value2`.
            public var value2: Components.Schemas.PaymentMethodBankCard.Value2Payload
            /// Creates a new `PaymentMethodBankCard`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodBankCard.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodYooMoney`.
        public struct PaymentMethodYooMoney: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodYooMoney/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodYooMoney/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodYooMoney/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Номер кошелька ЮMoney, с которого произведена оплата.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodYooMoney/value2/account_number`.
                public var accountNumber: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - accountNumber: Номер кошелька ЮMoney, с которого произведена оплата.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    accountNumber: Swift.String? = nil
                ) {
                    self._type = _type
                    self.accountNumber = accountNumber
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case accountNumber = "account_number"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodYooMoney/value2`.
            public var value2: Components.Schemas.PaymentMethodYooMoney.Value2Payload
            /// Creates a new `PaymentMethodYooMoney`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodYooMoney.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodSberbank`.
        public struct PaymentMethodSberbank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodSberbank/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodSberbank/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodSberbank/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Телефон пользователя, на который зарегистрирован аккаунт в СберБанк Онлайн.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodSberbank/value2/phone`.
                public var phone: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - phone: Телефон пользователя, на который зарегистрирован аккаунт в СберБанк Онлайн.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    phone: Swift.String? = nil
                ) {
                    self._type = _type
                    self.phone = phone
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case phone
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodSberbank/value2`.
            public var value2: Components.Schemas.PaymentMethodSberbank.Value2Payload
            /// Creates a new `PaymentMethodSberbank`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodSberbank.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodQiwi`.
        public struct PaymentMethodQiwi: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodQiwi/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodQiwi/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodQiwi/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Телефон пользователя, на который зарегистрирован QIWI Wallet.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodQiwi/value2/phone`.
                public var phone: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - phone: Телефон пользователя, на который зарегистрирован QIWI Wallet.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    phone: Swift.String? = nil
                ) {
                    self._type = _type
                    self.phone = phone
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case phone
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodQiwi/value2`.
            public var value2: Components.Schemas.PaymentMethodQiwi.Value2Payload
            /// Creates a new `PaymentMethodQiwi`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodQiwi.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodWebmoney`.
        public struct PaymentMethodWebmoney: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodWebmoney/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodWebmoney/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodWebmoney/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodWebmoney/value2`.
            public var value2: Components.Schemas.PaymentMethodWebmoney.Value2Payload
            /// Creates a new `PaymentMethodWebmoney`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodWebmoney.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodAlfabank`.
        public struct PaymentMethodAlfabank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodAlfabank/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodAlfabank/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodAlfabank/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Логин пользователя в Альфа-Клике.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodAlfabank/value2/login`.
                public var login: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - login: Логин пользователя в Альфа-Клике.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    login: Swift.String? = nil
                ) {
                    self._type = _type
                    self.login = login
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case login
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodAlfabank/value2`.
            public var value2: Components.Schemas.PaymentMethodAlfabank.Value2Payload
            /// Creates a new `PaymentMethodAlfabank`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodAlfabank.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodTinkoffBank`.
        public struct PaymentMethodTinkoffBank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodTinkoffBank/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodTinkoffBank/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodTinkoffBank/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Телефон пользователя, на который зарегистрирован аккаунт в Тинькофф Банке.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodTinkoffBank/value2/phone`.
                public var phone: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - phone: Телефон пользователя, на который зарегистрирован аккаунт в Тинькофф Банке.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    phone: Swift.String? = nil
                ) {
                    self._type = _type
                    self.phone = phone
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case phone
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodTinkoffBank/value2`.
            public var value2: Components.Schemas.PaymentMethodTinkoffBank.Value2Payload
            /// Creates a new `PaymentMethodTinkoffBank`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodTinkoffBank.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodCash`.
        public struct PaymentMethodCash: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodCash/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodCash/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodCash/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodCash/value2`.
            public var value2: Components.Schemas.PaymentMethodCash.Value2Payload
            /// Creates a new `PaymentMethodCash`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodCash.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank`.
        public struct PaymentMethodB2BSberbank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details`.
                public struct PayerBankDetailsPayload: Codable, Hashable, Sendable {
                    /// Номер счета организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details/account`.
                    public var account: Swift.String
                    /// Адрес организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details/address`.
                    public var address: Swift.String?
                    /// БИК банка организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details/bank_bic`.
                    public var bankBic: Swift.String
                    /// Наименование банка организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details/bank_name`.
                    public var bankName: Swift.String?
                    /// ИНН организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details/inn`.
                    public var inn: Swift.String
                    /// КПП организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details/kpp`.
                    public var kpp: Swift.String?
                    /// Наименование организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details/name`.
                    public var name: Swift.String
                    /// Назначение платежа (не более 210 символов).
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details/payment_purpose`.
                    public var paymentPurpose: Swift.String
                    /// Creates a new `PayerBankDetailsPayload`.
                    ///
                    /// - Parameters:
                    ///   - account: Номер счета организации.
                    ///   - address: Адрес организации.
                    ///   - bankBic: БИК банка организации.
                    ///   - bankName: Наименование банка организации.
                    ///   - inn: ИНН организации.
                    ///   - kpp: КПП организации.
                    ///   - name: Наименование организации.
                    ///   - paymentPurpose: Назначение платежа (не более 210 символов).
                    public init(
                        account: Swift.String,
                        address: Swift.String? = nil,
                        bankBic: Swift.String,
                        bankName: Swift.String? = nil,
                        inn: Swift.String,
                        kpp: Swift.String? = nil,
                        name: Swift.String,
                        paymentPurpose: Swift.String
                    ) {
                        self.account = account
                        self.address = address
                        self.bankBic = bankBic
                        self.bankName = bankName
                        self.inn = inn
                        self.kpp = kpp
                        self.name = name
                        self.paymentPurpose = paymentPurpose
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account
                        case address
                        case bankBic = "bank_bic"
                        case bankName = "bank_name"
                        case inn
                        case kpp
                        case name
                        case paymentPurpose = "payment_purpose"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2/payer_bank_details`.
                public var payerBankDetails: Components.Schemas.PaymentMethodB2BSberbank.Value2Payload.PayerBankDetailsPayload?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - payerBankDetails:
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    payerBankDetails: Components.Schemas.PaymentMethodB2BSberbank.Value2Payload.PayerBankDetailsPayload? = nil
                ) {
                    self._type = _type
                    self.payerBankDetails = payerBankDetails
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case payerBankDetails = "payer_bank_details"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodB2BSberbank/value2`.
            public var value2: Components.Schemas.PaymentMethodB2BSberbank.Value2Payload
            /// Creates a new `PaymentMethodB2BSberbank`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodB2BSberbank.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodMobileBalance`.
        public struct PaymentMethodMobileBalance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodMobileBalance/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodMobileBalance/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodMobileBalance/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Телефон, с баланса которого будет произведен платеж.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodMobileBalance/value2/phone`.
                public var phone: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - phone: Телефон, с баланса которого будет произведен платеж.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    phone: Swift.String? = nil
                ) {
                    self._type = _type
                    self.phone = phone
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case phone
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodMobileBalance/value2`.
            public var value2: Components.Schemas.PaymentMethodMobileBalance.Value2Payload
            /// Creates a new `PaymentMethodMobileBalance`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodMobileBalance.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodApplePay`.
        public struct PaymentMethodApplePay: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodApplePay/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodApplePay/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodApplePay/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodApplePay/value2`.
            public var value2: Components.Schemas.PaymentMethodApplePay.Value2Payload
            /// Creates a new `PaymentMethodApplePay`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodApplePay.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodGooglePay`.
        public struct PaymentMethodGooglePay: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodGooglePay/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodGooglePay/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodGooglePay/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodGooglePay/value2`.
            public var value2: Components.Schemas.PaymentMethodGooglePay.Value2Payload
            /// Creates a new `PaymentMethodGooglePay`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodGooglePay.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodInstallments`.
        public struct PaymentMethodInstallments: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodInstallments/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodInstallments/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodInstallments/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodInstallments/value2`.
            public var value2: Components.Schemas.PaymentMethodInstallments.Value2Payload
            /// Creates a new `PaymentMethodInstallments`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodInstallments.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodSBP`.
        public struct PaymentMethodSBP: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodSBP/value1`.
            public var value1: Components.Schemas.PaymentMethodBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodSBP/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodSBP/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// SBP member bank ID
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodSBP/value2/bank_id`.
                public var bankId: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - bankId: SBP member bank ID
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    bankId: Swift.String? = nil
                ) {
                    self._type = _type
                    self.bankId = bankId
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case bankId = "bank_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodSBP/value2`.
            public var value2: Components.Schemas.PaymentMethodSBP.Value2Payload
            /// Creates a new `PaymentMethodSBP`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodBase,
                value2: Components.Schemas.PaymentMethodSBP.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// Объект платежа (`Payment`) содержит всю информацию о платеже, актуальную на текущий момент времени. Он формируется при создании платежа и приходит в ответ на любой запрос, связанный с платежами.
        ///
        /// Объект может содержать параметры и значения, не описанные в этом Справочнике API. Их следует игнорировать.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Payment`.
        public struct Payment: Codable, Hashable, Sendable {
            /// Идентификатор платежа в ЮKassa.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/id`.
            public var id: Swift.String
            /// Статус платежа. Возможные значения: `pending`, `waiting_for_capture`, `succeeded` и `canceled`. Подробнее про жизненный цикл платежа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/status`.
            public var status: Components.Schemas.PaymentStatus
            /// Сумма платежа. Иногда партнеры ЮKassa берут с пользователя дополнительную комиссию, которая не входит в эту сумму.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/amount`.
            public var amount: Components.Schemas.Amount
            /// Сумма платежа, которую получит магазин, — значение `amount` за вычетом комиссии ЮKassa. Если вы партнер и для аутентификации запросов используете OAuth-токен, запросите у магазина право на получение информации о комиссиях при платежах.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/income_amount`.
            public var incomeAmount: Components.Schemas.Amount?
            /// Описание транзакции (не более 128 символов), которое вы увидите в личном кабинете ЮKassa, а пользователь — при оплате. Например: «Оплата заказа № 72 для user@yoomoney.ru».
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/description`.
            public var description: Swift.String?
            /// Получатель платежа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/recipient`.
            public var recipient: Components.Schemas.Recipient?
            /// Способ оплаты, который был использован для этого платежа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/payment_method`.
            public var paymentMethod: Components.Schemas.PaymentMethod?
            /// Время подтверждения платежа. Указывается по UTC и передается в формате ISO 8601.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/captured_at`.
            public var capturedAt: Foundation.Date?
            /// Время создания заказа. Указывается по UTC и передается в формате ISO 8601. 
            /// Пример: `2017-11-03T11:52:31.827Z`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/created_at`.
            public var createdAt: Foundation.Date
            /// Время, до которого вы можете бесплатно отменить или подтвердить платеж. В указанное время платеж в статусе `waiting_for_capture` будет автоматически отменен. Указывается по UTC и передается в формате ISO 8601.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/expires_at`.
            public var expiresAt: Foundation.Date?
            /// Выбранный способ подтверждения платежа. Присутствует, когда платеж ожидает подтверждения от пользователя.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/confirmation`.
            public var confirmation: Components.Schemas.Confirmation?
            /// Признак тестовой операции.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/test`.
            public var test: Swift.Bool
            /// Сумма, которая вернулась пользователю. Присутствует, если у этого платежа есть успешные возвраты.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/refunded_amount`.
            public var refundedAmount: Components.Schemas.Amount?
            /// Признак оплаты заказа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/paid`.
            public var paid: Swift.Bool
            /// Возможность провести возврат по API.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/refundable`.
            public var refundable: Swift.Bool
            /// Статус регистрации чека. Возможные значения:
            /// - `pending` — данные в обработке;
            /// - `succeeded` — чек успешно зарегистрирован;
            /// - `canceled` — чек зарегистрировать не удалось; если используете Чеки от ЮKassa, обратитесь в техническую поддержку, в остальных случаях сформируйте чек вручную.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/receipt_registration`.
            @frozen public enum ReceiptRegistrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pending = "pending"
                case succeeded = "succeeded"
                case canceled = "canceled"
            }
            /// Статус регистрации чека. Возможные значения:
            /// - `pending` — данные в обработке;
            /// - `succeeded` — чек успешно зарегистрирован;
            /// - `canceled` — чек зарегистрировать не удалось; если используете Чеки от ЮKassa, обратитесь в техническую поддержку, в остальных случаях сформируйте чек вручную.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/receipt_registration`.
            public var receiptRegistration: Components.Schemas.Payment.ReceiptRegistrationPayload?
            /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа). Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa. Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/metadata`.
            public struct MetadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `MetadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа). Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa. Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/metadata`.
            public var metadata: Components.Schemas.Payment.MetadataPayload?
            /// Комментарий к статусу `canceled`: кто отменил платеж и по какой причине.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/cancellation_details`.
            public struct CancellationDetailsPayload: Codable, Hashable, Sendable {
                /// Участник процесса платежа, который принял решение об отмене транзакции. Может принимать значения `yoo_money`, `payment_network` и `merchant`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Payment/cancellation_details/party`.
                @frozen public enum PartyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case merchant = "merchant"
                    case yooMoney = "yoo_money"
                    case paymentNetwork = "payment_network"
                }
                /// Участник процесса платежа, который принял решение об отмене транзакции. Может принимать значения `yoo_money`, `payment_network` и `merchant`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Payment/cancellation_details/party`.
                public var party: Components.Schemas.Payment.CancellationDetailsPayload.PartyPayload?
                /// Причина отмены платежа.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Payment/cancellation_details/reason`.
                @frozen public enum ReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _3dSecureFailed = "3d_secure_failed"
                    case callIssuer = "call_issuer"
                    case canceledByMerchant = "canceled_by_merchant"
                    case cardExpired = "card_expired"
                    case countryForbidden = "country_forbidden"
                    case fraudSuspected = "fraud_suspected"
                    case generalDecline = "general_decline"
                    case identificationRequired = "identification_required"
                    case insufficientFunds = "insufficient_funds"
                    case internalTimeout = "internal_timeout"
                    case invalidCardNumber = "invalid_card_number"
                    case invalidCsc = "invalid_csc"
                    case issuerUnavailable = "issuer_unavailable"
                    case paymentMethodLimitExceeded = "payment_method_limit_exceeded"
                    case paymentMethodRestricted = "payment_method_restricted"
                    case permissionRevoked = "permission_revoked"
                    case unsupportedMobileOperator = "unsupported_mobile_operator"
                    case expiredOnConfirmation = "expired_on_confirmation"
                }
                /// Причина отмены платежа.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Payment/cancellation_details/reason`.
                public var reason: Components.Schemas.Payment.CancellationDetailsPayload.ReasonPayload?
                /// Creates a new `CancellationDetailsPayload`.
                ///
                /// - Parameters:
                ///   - party: Участник процесса платежа, который принял решение об отмене транзакции. Может принимать значения `yoo_money`, `payment_network` и `merchant`.
                ///   - reason: Причина отмены платежа.
                public init(
                    party: Components.Schemas.Payment.CancellationDetailsPayload.PartyPayload? = nil,
                    reason: Components.Schemas.Payment.CancellationDetailsPayload.ReasonPayload? = nil
                ) {
                    self.party = party
                    self.reason = reason
                }
                public enum CodingKeys: String, CodingKey {
                    case party
                    case reason
                }
            }
            /// Комментарий к статусу `canceled`: кто отменил платеж и по какой причине.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/cancellation_details`.
            public var cancellationDetails: Components.Schemas.Payment.CancellationDetailsPayload?
            /// Данные об авторизации платежа при оплате банковской картой.
            /// Присутствуют только для этих способов оплаты: банковская карта, Mir Pay, SberPay, T-Pay.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/authorization_details`.
            public struct AuthorizationDetailsPayload: Codable, Hashable, Sendable {
                /// Retrieval Reference Number — уникальный идентификатор транзакции в системе эмитента.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Payment/authorization_details/rrn`.
                public var rrn: Swift.String?
                /// Код авторизации. Выдается эмитентом и подтверждает проведение авторизации.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Payment/authorization_details/auth_code`.
                public var authCode: Swift.String?
                /// Данные о прохождении пользователем аутентификации по 3‑D Secure для подтверждения платежа.
                ///
                /// - Remark: Generated from `#/components/schemas/Payment/authorization_details/three_d_secure`.
                public struct ThreeDSecurePayload: Codable, Hashable, Sendable {
                    /// Отображение пользователю формы для прохождения аутентификации по 3‑D Secure. Возможные значения:
                    /// - `true` — ЮKassa отобразила пользователю форму, чтобы он мог пройти аутентификацию по 3‑D Secure;
                    /// - `false` — платеж проходил без аутентификации по 3‑D Secure.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/Payment/authorization_details/three_d_secure/applied`.
                    public var applied: Swift.Bool?
                    /// Creates a new `ThreeDSecurePayload`.
                    ///
                    /// - Parameters:
                    ///   - applied: Отображение пользователю формы для прохождения аутентификации по 3‑D Secure. Возможные значения:
                    public init(applied: Swift.Bool? = nil) {
                        self.applied = applied
                    }
                    public enum CodingKeys: String, CodingKey {
                        case applied
                    }
                }
                /// Данные о прохождении пользователем аутентификации по 3‑D Secure для подтверждения платежа.
                ///
                /// - Remark: Generated from `#/components/schemas/Payment/authorization_details/three_d_secure`.
                public var threeDSecure: Components.Schemas.Payment.AuthorizationDetailsPayload.ThreeDSecurePayload?
                /// Creates a new `AuthorizationDetailsPayload`.
                ///
                /// - Parameters:
                ///   - rrn: Retrieval Reference Number — уникальный идентификатор транзакции в системе эмитента.
                ///   - authCode: Код авторизации. Выдается эмитентом и подтверждает проведение авторизации.
                ///   - threeDSecure: Данные о прохождении пользователем аутентификации по 3‑D Secure для подтверждения платежа.
                public init(
                    rrn: Swift.String? = nil,
                    authCode: Swift.String? = nil,
                    threeDSecure: Components.Schemas.Payment.AuthorizationDetailsPayload.ThreeDSecurePayload? = nil
                ) {
                    self.rrn = rrn
                    self.authCode = authCode
                    self.threeDSecure = threeDSecure
                }
                public enum CodingKeys: String, CodingKey {
                    case rrn
                    case authCode = "auth_code"
                    case threeDSecure = "three_d_secure"
                }
            }
            /// Данные об авторизации платежа при оплате банковской картой.
            /// Присутствуют только для этих способов оплаты: банковская карта, Mir Pay, SberPay, T-Pay.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/authorization_details`.
            public var authorizationDetails: Components.Schemas.Payment.AuthorizationDetailsPayload?
            /// Данные о распределении денег — сколько и в какой магазин нужно перевести. Присутствует, если вы используете Сплитование платежей.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/transfers`.
            public var transfers: [Components.Schemas.Transfer]?
            /// Данные о сделке, в составе которой проходит платеж. Присутствует, если вы проводите Безопасную сделку.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/deal`.
            public var deal: Components.Schemas.Deal?
            /// Идентификатор покупателя в вашей системе, например электронная почта или номер телефона. Не более 200 символов. Присутствует, если вы хотите запомнить банковскую карту и отобразить ее при повторном платеже в виджете ЮKassa.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Payment/merchant_customer_id`.
            public var merchantCustomerId: Swift.String?
            /// Creates a new `Payment`.
            ///
            /// - Parameters:
            ///   - id: Идентификатор платежа в ЮKassa.
            ///   - status: Статус платежа. Возможные значения: `pending`, `waiting_for_capture`, `succeeded` и `canceled`. Подробнее про жизненный цикл платежа.
            ///   - amount: Сумма платежа. Иногда партнеры ЮKassa берут с пользователя дополнительную комиссию, которая не входит в эту сумму.
            ///   - incomeAmount: Сумма платежа, которую получит магазин, — значение `amount` за вычетом комиссии ЮKassa. Если вы партнер и для аутентификации запросов используете OAuth-токен, запросите у магазина право на получение информации о комиссиях при платежах.
            ///   - description: Описание транзакции (не более 128 символов), которое вы увидите в личном кабинете ЮKassa, а пользователь — при оплате. Например: «Оплата заказа № 72 для user@yoomoney.ru».
            ///   - recipient: Получатель платежа.
            ///   - paymentMethod: Способ оплаты, который был использован для этого платежа.
            ///   - capturedAt: Время подтверждения платежа. Указывается по UTC и передается в формате ISO 8601.
            ///   - createdAt: Время создания заказа. Указывается по UTC и передается в формате ISO 8601. 
            ///   - expiresAt: Время, до которого вы можете бесплатно отменить или подтвердить платеж. В указанное время платеж в статусе `waiting_for_capture` будет автоматически отменен. Указывается по UTC и передается в формате ISO 8601.
            ///   - confirmation: Выбранный способ подтверждения платежа. Присутствует, когда платеж ожидает подтверждения от пользователя.
            ///   - test: Признак тестовой операции.
            ///   - refundedAmount: Сумма, которая вернулась пользователю. Присутствует, если у этого платежа есть успешные возвраты.
            ///   - paid: Признак оплаты заказа.
            ///   - refundable: Возможность провести возврат по API.
            ///   - receiptRegistration: Статус регистрации чека. Возможные значения:
            ///   - metadata: Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа). Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa. Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
            ///   - cancellationDetails: Комментарий к статусу `canceled`: кто отменил платеж и по какой причине.
            ///   - authorizationDetails: Данные об авторизации платежа при оплате банковской картой.
            ///   - transfers: Данные о распределении денег — сколько и в какой магазин нужно перевести. Присутствует, если вы используете Сплитование платежей.
            ///   - deal: Данные о сделке, в составе которой проходит платеж. Присутствует, если вы проводите Безопасную сделку.
            ///   - merchantCustomerId: Идентификатор покупателя в вашей системе, например электронная почта или номер телефона. Не более 200 символов. Присутствует, если вы хотите запомнить банковскую карту и отобразить ее при повторном платеже в виджете ЮKassa.
            public init(
                id: Swift.String,
                status: Components.Schemas.PaymentStatus,
                amount: Components.Schemas.Amount,
                incomeAmount: Components.Schemas.Amount? = nil,
                description: Swift.String? = nil,
                recipient: Components.Schemas.Recipient? = nil,
                paymentMethod: Components.Schemas.PaymentMethod? = nil,
                capturedAt: Foundation.Date? = nil,
                createdAt: Foundation.Date,
                expiresAt: Foundation.Date? = nil,
                confirmation: Components.Schemas.Confirmation? = nil,
                test: Swift.Bool,
                refundedAmount: Components.Schemas.Amount? = nil,
                paid: Swift.Bool,
                refundable: Swift.Bool,
                receiptRegistration: Components.Schemas.Payment.ReceiptRegistrationPayload? = nil,
                metadata: Components.Schemas.Payment.MetadataPayload? = nil,
                cancellationDetails: Components.Schemas.Payment.CancellationDetailsPayload? = nil,
                authorizationDetails: Components.Schemas.Payment.AuthorizationDetailsPayload? = nil,
                transfers: [Components.Schemas.Transfer]? = nil,
                deal: Components.Schemas.Deal? = nil,
                merchantCustomerId: Swift.String? = nil
            ) {
                self.id = id
                self.status = status
                self.amount = amount
                self.incomeAmount = incomeAmount
                self.description = description
                self.recipient = recipient
                self.paymentMethod = paymentMethod
                self.capturedAt = capturedAt
                self.createdAt = createdAt
                self.expiresAt = expiresAt
                self.confirmation = confirmation
                self.test = test
                self.refundedAmount = refundedAmount
                self.paid = paid
                self.refundable = refundable
                self.receiptRegistration = receiptRegistration
                self.metadata = metadata
                self.cancellationDetails = cancellationDetails
                self.authorizationDetails = authorizationDetails
                self.transfers = transfers
                self.deal = deal
                self.merchantCustomerId = merchantCustomerId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case status
                case amount
                case incomeAmount = "income_amount"
                case description
                case recipient
                case paymentMethod = "payment_method"
                case capturedAt = "captured_at"
                case createdAt = "created_at"
                case expiresAt = "expires_at"
                case confirmation
                case test
                case refundedAmount = "refunded_amount"
                case paid
                case refundable
                case receiptRegistration = "receipt_registration"
                case metadata
                case cancellationDetails = "cancellation_details"
                case authorizationDetails = "authorization_details"
                case transfers
                case deal
                case merchantCustomerId = "merchant_customer_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest`.
        public struct CreatePaymentRequest: Codable, Hashable, Sendable {
            /// Сумма платежа. Иногда партнеры ЮKassa берут с пользователя дополнительную комиссию, которая не входит в эту сумму.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/amount`.
            public var amount: Components.Schemas.Amount
            /// Описание транзакции (не более 128 символов), которое вы увидите в личном кабинете ЮKassa, а пользователь — при оплате. Например: «Оплата заказа № 72 для user@yoomoney.ru».
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/description`.
            public var description: Swift.String?
            /// Одноразовый токен для проведения оплаты, сформированный с помощью Checkout.js или мобильного SDK.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/payment_token`.
            public var paymentToken: Swift.String?
            /// Идентификатор сохраненного способа оплаты.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/payment_method_id`.
            public var paymentMethodId: Swift.String?
            /// Данные для оплаты конкретным способом (`payment_method`). Вы можете не передавать этот объект в запросе. В этом случае пользователь будет выбирать способ оплаты на стороне ЮKassa.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/payment_method_data`.
            public var paymentMethodData: Components.Schemas.PaymentMethodData?
            /// Данные, необходимые для инициирования выбранного сценария подтверждения платежа пользователем.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/confirmation`.
            public var confirmation: Components.Schemas.Confirmation?
            /// Сохранить платежный метод для проведения рекуррентных платежей.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/save_payment_method`.
            public var savePaymentMethod: Swift.Bool?
            /// Автоматически принять поступившую оплату. Значение по умолчанию — true.
            /// Если вы хотите принять оплату отдельным запросом, передайте false. Тогда после оплаты платеж перейдет в статус waiting_for_capture, и для принятия оплаты нужно будет вызвать метод capture.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/capture`.
            public var capture: Swift.Bool?
            /// IP-адрес покупателя. Если не указан, используется IP-адрес TCP-подключения.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/client_ip`.
            public var clientIp: Swift.String?
            /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа). Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa. Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/metadata`.
            public struct MetadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `MetadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа). Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa. Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/metadata`.
            public var metadata: Components.Schemas.CreatePaymentRequest.MetadataPayload?
            /// Данные для формирования чека в онлайн-кассе (для соблюдения 54-ФЗ).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/receipt`.
            public var receipt: Components.Schemas.CreatePaymentReceipt?
            /// Идентификатор покупателя в вашей системе, например электронная почта или номер телефона. Не более 200 символов. Присутствует, если вы хотите запомнить банковскую карту и отобразить ее при повторном платеже в виджете ЮKassa.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/merchant_customer_id`.
            public var merchantCustomerId: Swift.String?
            /// Получатель платежа. Используется для разделения потоков платежей в рамках одного аккаунта или создания платежа в адрес другого аккаунта.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/recipient`.
            public var recipient: Components.Schemas.Recipient?
            /// Данные о распределении денег — сколько и в какой магазин нужно перевести. Используется при сплитовании платежа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/transfers`.
            public var transfers: [Components.Schemas.Transfer]?
            /// Данные о сделке, в составе которой проходит платеж. Необходимо передавать, если вы проводите Безопасную сделку.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentRequest/deal`.
            public var deal: Components.Schemas.Deal?
            /// Creates a new `CreatePaymentRequest`.
            ///
            /// - Parameters:
            ///   - amount: Сумма платежа. Иногда партнеры ЮKassa берут с пользователя дополнительную комиссию, которая не входит в эту сумму.
            ///   - description: Описание транзакции (не более 128 символов), которое вы увидите в личном кабинете ЮKassa, а пользователь — при оплате. Например: «Оплата заказа № 72 для user@yoomoney.ru».
            ///   - paymentToken: Одноразовый токен для проведения оплаты, сформированный с помощью Checkout.js или мобильного SDK.
            ///   - paymentMethodId: Идентификатор сохраненного способа оплаты.
            ///   - paymentMethodData: Данные для оплаты конкретным способом (`payment_method`). Вы можете не передавать этот объект в запросе. В этом случае пользователь будет выбирать способ оплаты на стороне ЮKassa.
            ///   - confirmation: Данные, необходимые для инициирования выбранного сценария подтверждения платежа пользователем.
            ///   - savePaymentMethod: Сохранить платежный метод для проведения рекуррентных платежей.
            ///   - capture: Автоматически принять поступившую оплату. Значение по умолчанию — true.
            ///   - clientIp: IP-адрес покупателя. Если не указан, используется IP-адрес TCP-подключения.
            ///   - metadata: Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа). Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa. Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
            ///   - receipt: Данные для формирования чека в онлайн-кассе (для соблюдения 54-ФЗ).
            ///   - merchantCustomerId: Идентификатор покупателя в вашей системе, например электронная почта или номер телефона. Не более 200 символов. Присутствует, если вы хотите запомнить банковскую карту и отобразить ее при повторном платеже в виджете ЮKassa.
            ///   - recipient: Получатель платежа. Используется для разделения потоков платежей в рамках одного аккаунта или создания платежа в адрес другого аккаунта.
            ///   - transfers: Данные о распределении денег — сколько и в какой магазин нужно перевести. Используется при сплитовании платежа.
            ///   - deal: Данные о сделке, в составе которой проходит платеж. Необходимо передавать, если вы проводите Безопасную сделку.
            public init(
                amount: Components.Schemas.Amount,
                description: Swift.String? = nil,
                paymentToken: Swift.String? = nil,
                paymentMethodId: Swift.String? = nil,
                paymentMethodData: Components.Schemas.PaymentMethodData? = nil,
                confirmation: Components.Schemas.Confirmation? = nil,
                savePaymentMethod: Swift.Bool? = nil,
                capture: Swift.Bool? = nil,
                clientIp: Swift.String? = nil,
                metadata: Components.Schemas.CreatePaymentRequest.MetadataPayload? = nil,
                receipt: Components.Schemas.CreatePaymentReceipt? = nil,
                merchantCustomerId: Swift.String? = nil,
                recipient: Components.Schemas.Recipient? = nil,
                transfers: [Components.Schemas.Transfer]? = nil,
                deal: Components.Schemas.Deal? = nil
            ) {
                self.amount = amount
                self.description = description
                self.paymentToken = paymentToken
                self.paymentMethodId = paymentMethodId
                self.paymentMethodData = paymentMethodData
                self.confirmation = confirmation
                self.savePaymentMethod = savePaymentMethod
                self.capture = capture
                self.clientIp = clientIp
                self.metadata = metadata
                self.receipt = receipt
                self.merchantCustomerId = merchantCustomerId
                self.recipient = recipient
                self.transfers = transfers
                self.deal = deal
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case description
                case paymentToken = "payment_token"
                case paymentMethodId = "payment_method_id"
                case paymentMethodData = "payment_method_data"
                case confirmation
                case savePaymentMethod = "save_payment_method"
                case capture
                case clientIp = "client_ip"
                case metadata
                case receipt
                case merchantCustomerId = "merchant_customer_id"
                case recipient
                case transfers
                case deal
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodData`.
        @frozen public enum PaymentMethodData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataAlfabank`.
            case alfabank(Components.Schemas.PaymentMethodDataAlfabank)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataApplePay`.
            case applePay(Components.Schemas.PaymentMethodDataApplePay)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataB2BSberbank`.
            case b2bSberbank(Components.Schemas.PaymentMethodDataB2BSberbank)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataBankCard`.
            case bankCard(Components.Schemas.PaymentMethodDataBankCard)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataCash`.
            case cash(Components.Schemas.PaymentMethodDataCash)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataGooglePay`.
            case googlePay(Components.Schemas.PaymentMethodDataGooglePay)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataInstallments`.
            case installments(Components.Schemas.PaymentMethodDataInstallments)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataMobileBalance`.
            case mobileBalance(Components.Schemas.PaymentMethodDataMobileBalance)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataQiwi`.
            case qiwi(Components.Schemas.PaymentMethodDataQiwi)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataSberbank`.
            case sberbank(Components.Schemas.PaymentMethodDataSberbank)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataSBP`.
            case sbp(Components.Schemas.PaymentMethodDataSBP)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataTinkoffBank`.
            case tinkoffBank(Components.Schemas.PaymentMethodDataTinkoffBank)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataWebmoney`.
            case webmoney(Components.Schemas.PaymentMethodDataWebmoney)
            /// - Remark: Generated from `#/components/schemas/PaymentMethodData/PaymentMethodDataYooMoney`.
            case yooMoney(Components.Schemas.PaymentMethodDataYooMoney)
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                switch discriminator {
                case "alfabank":
                    self = .alfabank(try .init(from: decoder))
                case "apple_pay":
                    self = .applePay(try .init(from: decoder))
                case "b2b_sberbank":
                    self = .b2bSberbank(try .init(from: decoder))
                case "bank_card":
                    self = .bankCard(try .init(from: decoder))
                case "cash":
                    self = .cash(try .init(from: decoder))
                case "google_pay":
                    self = .googlePay(try .init(from: decoder))
                case "installments":
                    self = .installments(try .init(from: decoder))
                case "mobile_balance":
                    self = .mobileBalance(try .init(from: decoder))
                case "qiwi":
                    self = .qiwi(try .init(from: decoder))
                case "sberbank":
                    self = .sberbank(try .init(from: decoder))
                case "sbp":
                    self = .sbp(try .init(from: decoder))
                case "tinkoff_bank":
                    self = .tinkoffBank(try .init(from: decoder))
                case "webmoney":
                    self = .webmoney(try .init(from: decoder))
                case "yoo_money":
                    self = .yooMoney(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys._type,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .alfabank(value):
                    try value.encode(to: encoder)
                case let .applePay(value):
                    try value.encode(to: encoder)
                case let .b2bSberbank(value):
                    try value.encode(to: encoder)
                case let .bankCard(value):
                    try value.encode(to: encoder)
                case let .cash(value):
                    try value.encode(to: encoder)
                case let .googlePay(value):
                    try value.encode(to: encoder)
                case let .installments(value):
                    try value.encode(to: encoder)
                case let .mobileBalance(value):
                    try value.encode(to: encoder)
                case let .qiwi(value):
                    try value.encode(to: encoder)
                case let .sberbank(value):
                    try value.encode(to: encoder)
                case let .sbp(value):
                    try value.encode(to: encoder)
                case let .tinkoffBank(value):
                    try value.encode(to: encoder)
                case let .webmoney(value):
                    try value.encode(to: encoder)
                case let .yooMoney(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBase`.
        public struct PaymentMethodDataBase: Codable, Hashable, Sendable {
            /// Код способа оплаты. Возможные значения:
            /// - `bank_card` — банковская карта;
            /// - `yoo_money` — кошелек ЮMoney;
            /// - `sberbank` — SberPay;
            /// - `qiwi` — QIWI Кошелек;
            /// - `webmoney` — Webmoney;
            /// - `alfabank` — Альфа-Клик;
            /// - `tinkoff_bank` — Тинькофф Банк;
            /// - `cash` — наличные;
            /// - `b2b_sberbank` — Сбербанк Бизнес Онлайн;
            /// - `mobile_balance` — баланс мобильного телефона;
            /// - `apple_pay` — Apple Pay;
            /// - `google_pay` — Google Pay;
            /// - `installments` — рассрочка;
            /// - `sbp` — Система быстрых платежей.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBase/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bankCard = "bank_card"
                case yooMoney = "yoo_money"
                case sberbank = "sberbank"
                case qiwi = "qiwi"
                case webmoney = "webmoney"
                case alfabank = "alfabank"
                case tinkoffBank = "tinkoff_bank"
                case cash = "cash"
                case b2bSberbank = "b2b_sberbank"
                case mobileBalance = "mobile_balance"
                case applePay = "apple_pay"
                case googlePay = "google_pay"
                case installments = "installments"
                case sbp = "sbp"
            }
            /// Код способа оплаты. Возможные значения:
            /// - `bank_card` — банковская карта;
            /// - `yoo_money` — кошелек ЮMoney;
            /// - `sberbank` — SberPay;
            /// - `qiwi` — QIWI Кошелек;
            /// - `webmoney` — Webmoney;
            /// - `alfabank` — Альфа-Клик;
            /// - `tinkoff_bank` — Тинькофф Банк;
            /// - `cash` — наличные;
            /// - `b2b_sberbank` — Сбербанк Бизнес Онлайн;
            /// - `mobile_balance` — баланс мобильного телефона;
            /// - `apple_pay` — Apple Pay;
            /// - `google_pay` — Google Pay;
            /// - `installments` — рассрочка;
            /// - `sbp` — Система быстрых платежей.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBase/type`.
            public var _type: Components.Schemas.PaymentMethodDataBase._TypePayload
            /// Creates a new `PaymentMethodDataBase`.
            ///
            /// - Parameters:
            ///   - _type: Код способа оплаты. Возможные значения:
            public init(_type: Components.Schemas.PaymentMethodDataBase._TypePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard`.
        public struct PaymentMethodDataBankCard: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2/card`.
                public struct CardPayload: Codable, Hashable, Sendable {
                    /// Номер банковской карты. Формат: только цифры, без пробелов.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2/card/number`.
                    public var number: Swift.String?
                    /// Срок действия, год, YYYY.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2/card/expiry_year`.
                    public var expiryYear: Swift.String?
                    /// Срок действия, месяц, MM.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2/card/expiry_month`.
                    public var expiryMonth: Swift.String?
                    /// CVV2/CVC2/ППК2 код. Формат: от 3 до 4 цифр.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2/card/csc`.
                    public var csc: Swift.String?
                    /// Имя держателя карты. Формат: ГОСТ 7.79-2000 (ISO 9).
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2/card/cardholder`.
                    public var cardholder: Swift.String?
                    /// Creates a new `CardPayload`.
                    ///
                    /// - Parameters:
                    ///   - number: Номер банковской карты. Формат: только цифры, без пробелов.
                    ///   - expiryYear: Срок действия, год, YYYY.
                    ///   - expiryMonth: Срок действия, месяц, MM.
                    ///   - csc: CVV2/CVC2/ППК2 код. Формат: от 3 до 4 цифр.
                    ///   - cardholder: Имя держателя карты. Формат: ГОСТ 7.79-2000 (ISO 9).
                    public init(
                        number: Swift.String? = nil,
                        expiryYear: Swift.String? = nil,
                        expiryMonth: Swift.String? = nil,
                        csc: Swift.String? = nil,
                        cardholder: Swift.String? = nil
                    ) {
                        self.number = number
                        self.expiryYear = expiryYear
                        self.expiryMonth = expiryMonth
                        self.csc = csc
                        self.cardholder = cardholder
                    }
                    public enum CodingKeys: String, CodingKey {
                        case number
                        case expiryYear = "expiry_year"
                        case expiryMonth = "expiry_month"
                        case csc
                        case cardholder
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2/card`.
                public var card: Components.Schemas.PaymentMethodDataBankCard.Value2Payload.CardPayload?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - card:
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    card: Components.Schemas.PaymentMethodDataBankCard.Value2Payload.CardPayload? = nil
                ) {
                    self._type = _type
                    self.card = card
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case card
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataBankCard/value2`.
            public var value2: Components.Schemas.PaymentMethodDataBankCard.Value2Payload
            /// Creates a new `PaymentMethodDataBankCard`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataBankCard.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataYooMoney`.
        public struct PaymentMethodDataYooMoney: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataYooMoney/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataYooMoney/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataYooMoney/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataYooMoney/value2`.
            public var value2: Components.Schemas.PaymentMethodDataYooMoney.Value2Payload
            /// Creates a new `PaymentMethodDataYooMoney`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataYooMoney.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSberbank`.
        public struct PaymentMethodDataSberbank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSberbank/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSberbank/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSberbank/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Телефон пользователя, привязанный к Сбербанк Онлайн. Строка длиной от 4 до 15 символов, содержащая только цифры.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSberbank/value2/phone`.
                public var phone: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - phone: Телефон пользователя, привязанный к Сбербанк Онлайн. Строка длиной от 4 до 15 символов, содержащая только цифры.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    phone: Swift.String? = nil
                ) {
                    self._type = _type
                    self.phone = phone
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case phone
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSberbank/value2`.
            public var value2: Components.Schemas.PaymentMethodDataSberbank.Value2Payload
            /// Creates a new `PaymentMethodDataSberbank`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataSberbank.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataQiwi`.
        public struct PaymentMethodDataQiwi: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataQiwi/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataQiwi/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataQiwi/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Телефон пользователя, привязанный к QIWI Wallet. Строка длиной от 4 до 15 символов, содержащая только цифры.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataQiwi/value2/phone`.
                public var phone: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - phone: Телефон пользователя, привязанный к QIWI Wallet. Строка длиной от 4 до 15 символов, содержащая только цифры.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    phone: Swift.String? = nil
                ) {
                    self._type = _type
                    self.phone = phone
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case phone
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataQiwi/value2`.
            public var value2: Components.Schemas.PaymentMethodDataQiwi.Value2Payload
            /// Creates a new `PaymentMethodDataQiwi`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataQiwi.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataWebmoney`.
        public struct PaymentMethodDataWebmoney: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataWebmoney/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataWebmoney/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataWebmoney/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataWebmoney/value2`.
            public var value2: Components.Schemas.PaymentMethodDataWebmoney.Value2Payload
            /// Creates a new `PaymentMethodDataWebmoney`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataWebmoney.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataAlfabank`.
        public struct PaymentMethodDataAlfabank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataAlfabank/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataAlfabank/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataAlfabank/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Логин пользователя в Альфа-Клике.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataAlfabank/value2/login`.
                public var login: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - login: Логин пользователя в Альфа-Клике.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    login: Swift.String? = nil
                ) {
                    self._type = _type
                    self.login = login
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case login
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataAlfabank/value2`.
            public var value2: Components.Schemas.PaymentMethodDataAlfabank.Value2Payload
            /// Creates a new `PaymentMethodDataAlfabank`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataAlfabank.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataTinkoffBank`.
        public struct PaymentMethodDataTinkoffBank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataTinkoffBank/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataTinkoffBank/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataTinkoffBank/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataTinkoffBank/value2`.
            public var value2: Components.Schemas.PaymentMethodDataTinkoffBank.Value2Payload
            /// Creates a new `PaymentMethodDataTinkoffBank`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataTinkoffBank.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataCash`.
        public struct PaymentMethodDataCash: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataCash/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataCash/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataCash/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataCash/value2`.
            public var value2: Components.Schemas.PaymentMethodDataCash.Value2Payload
            /// Creates a new `PaymentMethodDataCash`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataCash.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank`.
        public struct PaymentMethodDataB2BSberbank: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details`.
                public struct PayerBankDetailsPayload: Codable, Hashable, Sendable {
                    /// Номер счета организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details/account`.
                    public var account: Swift.String
                    /// Адрес организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details/address`.
                    public var address: Swift.String?
                    /// БИК банка организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details/bank_bic`.
                    public var bankBic: Swift.String
                    /// Наименование банка организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details/bank_name`.
                    public var bankName: Swift.String?
                    /// ИНН организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details/inn`.
                    public var inn: Swift.String
                    /// КПП организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details/kpp`.
                    public var kpp: Swift.String?
                    /// Наименование организации.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details/name`.
                    public var name: Swift.String
                    /// Назначение платежа (не более 210 символов).
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details/payment_purpose`.
                    public var paymentPurpose: Swift.String
                    /// Creates a new `PayerBankDetailsPayload`.
                    ///
                    /// - Parameters:
                    ///   - account: Номер счета организации.
                    ///   - address: Адрес организации.
                    ///   - bankBic: БИК банка организации.
                    ///   - bankName: Наименование банка организации.
                    ///   - inn: ИНН организации.
                    ///   - kpp: КПП организации.
                    ///   - name: Наименование организации.
                    ///   - paymentPurpose: Назначение платежа (не более 210 символов).
                    public init(
                        account: Swift.String,
                        address: Swift.String? = nil,
                        bankBic: Swift.String,
                        bankName: Swift.String? = nil,
                        inn: Swift.String,
                        kpp: Swift.String? = nil,
                        name: Swift.String,
                        paymentPurpose: Swift.String
                    ) {
                        self.account = account
                        self.address = address
                        self.bankBic = bankBic
                        self.bankName = bankName
                        self.inn = inn
                        self.kpp = kpp
                        self.name = name
                        self.paymentPurpose = paymentPurpose
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account
                        case address
                        case bankBic = "bank_bic"
                        case bankName = "bank_name"
                        case inn
                        case kpp
                        case name
                        case paymentPurpose = "payment_purpose"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2/payer_bank_details`.
                public var payerBankDetails: Components.Schemas.PaymentMethodDataB2BSberbank.Value2Payload.PayerBankDetailsPayload?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - payerBankDetails:
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    payerBankDetails: Components.Schemas.PaymentMethodDataB2BSberbank.Value2Payload.PayerBankDetailsPayload? = nil
                ) {
                    self._type = _type
                    self.payerBankDetails = payerBankDetails
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case payerBankDetails = "payer_bank_details"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataB2BSberbank/value2`.
            public var value2: Components.Schemas.PaymentMethodDataB2BSberbank.Value2Payload
            /// Creates a new `PaymentMethodDataB2BSberbank`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataB2BSberbank.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataMobileBalance`.
        public struct PaymentMethodDataMobileBalance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataMobileBalance/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataMobileBalance/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataMobileBalance/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Phone number to be debited
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataMobileBalance/value2/phone`.
                public var phone: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - phone: Phone number to be debited
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    phone: Swift.String? = nil
                ) {
                    self._type = _type
                    self.phone = phone
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case phone
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataMobileBalance/value2`.
            public var value2: Components.Schemas.PaymentMethodDataMobileBalance.Value2Payload
            /// Creates a new `PaymentMethodDataMobileBalance`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataMobileBalance.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа). Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa. Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Metadata`.
        public struct Metadata: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: [String: Swift.String]
            /// Creates a new `Metadata`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: [String: Swift.String] = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentsList`.
        public struct PaymentsList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentsList/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/PaymentsList/type`.
            public var _type: Components.Schemas.PaymentsList._TypePayload
            /// - Remark: Generated from `#/components/schemas/PaymentsList/items`.
            public var items: [Components.Schemas.Payment]
            /// Токен для получения следующей страницы списка.
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentsList/next_cursor`.
            public var nextCursor: Swift.String?
            /// Creates a new `PaymentsList`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - items:
            ///   - nextCursor: Токен для получения следующей страницы списка.
            public init(
                _type: Components.Schemas.PaymentsList._TypePayload,
                items: [Components.Schemas.Payment],
                nextCursor: Swift.String? = nil
            ) {
                self._type = _type
                self.items = items
                self.nextCursor = nextCursor
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case items
                case nextCursor = "next_cursor"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// Код ошибки.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/code`.
            public var code: Swift.String
            /// Описание ошибки.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/description`.
            public var description: Swift.String
            /// Параметр, в котором возникла ошибка.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/parameter`.
            public var parameter: Swift.String?
            /// Время в секундах, через которое можно повторить запрос.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/retry_after`.
            public var retryAfter: Swift.Int?
            /// Тип ошибки.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/type`.
            public var _type: Swift.String?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - code: Код ошибки.
            ///   - description: Описание ошибки.
            ///   - parameter: Параметр, в котором возникла ошибка.
            ///   - retryAfter: Время в секундах, через которое можно повторить запрос.
            ///   - _type: Тип ошибки.
            public init(
                code: Swift.String,
                description: Swift.String,
                parameter: Swift.String? = nil,
                retryAfter: Swift.Int? = nil,
                _type: Swift.String? = nil
            ) {
                self.code = code
                self.description = description
                self.parameter = parameter
                self.retryAfter = retryAfter
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case description
                case parameter
                case retryAfter = "retry_after"
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Recipient`.
        public struct Recipient: Codable, Hashable, Sendable {
            /// Идентификатор магазина в ЮKassa.
            ///
            /// - Remark: Generated from `#/components/schemas/Recipient/account_id`.
            public var accountId: Swift.String?
            /// Идентификатор субаккаунта. Используется для разделения потоков платежей в рамках одного аккаунта.
            ///
            /// - Remark: Generated from `#/components/schemas/Recipient/gateway_id`.
            public var gatewayId: Swift.String?
            /// Creates a new `Recipient`.
            ///
            /// - Parameters:
            ///   - accountId: Идентификатор магазина в ЮKassa.
            ///   - gatewayId: Идентификатор субаккаунта. Используется для разделения потоков платежей в рамках одного аккаунта.
            public init(
                accountId: Swift.String? = nil,
                gatewayId: Swift.String? = nil
            ) {
                self.accountId = accountId
                self.gatewayId = gatewayId
            }
            public enum CodingKeys: String, CodingKey {
                case accountId = "account_id"
                case gatewayId = "gateway_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateRefundRequest`.
        public struct CreateRefundRequest: Codable, Hashable, Sendable {
            /// Идентификатор платежа для возврата.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRefundRequest/payment_id`.
            public var paymentId: Swift.String
            /// Сумма возврата. Должна быть меньше или равна сумме платежа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRefundRequest/amount`.
            public var amount: Components.Schemas.Amount
            /// Комментарий к возврату. Не более 128 символов.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRefundRequest/description`.
            public var description: Swift.String?
            /// Данные для формирования чека возврата в онлайн-кассе.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRefundRequest/receipt`.
            public var receipt: Components.Schemas.Receipt?
            /// Данные о том, с какого магазина и какую сумму нужно удержать для проведения возврата. Присутствует, если вы используете Сплитование платежей.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRefundRequest/sources`.
            public var sources: [Components.Schemas.Source]?
            /// Creates a new `CreateRefundRequest`.
            ///
            /// - Parameters:
            ///   - paymentId: Идентификатор платежа для возврата.
            ///   - amount: Сумма возврата. Должна быть меньше или равна сумме платежа.
            ///   - description: Комментарий к возврату. Не более 128 символов.
            ///   - receipt: Данные для формирования чека возврата в онлайн-кассе.
            ///   - sources: Данные о том, с какого магазина и какую сумму нужно удержать для проведения возврата. Присутствует, если вы используете Сплитование платежей.
            public init(
                paymentId: Swift.String,
                amount: Components.Schemas.Amount,
                description: Swift.String? = nil,
                receipt: Components.Schemas.Receipt? = nil,
                sources: [Components.Schemas.Source]? = nil
            ) {
                self.paymentId = paymentId
                self.amount = amount
                self.description = description
                self.receipt = receipt
                self.sources = sources
            }
            public enum CodingKeys: String, CodingKey {
                case paymentId = "payment_id"
                case amount
                case description
                case receipt
                case sources
            }
        }
        /// - Remark: Generated from `#/components/schemas/Source`.
        public struct Source: Codable, Hashable, Sendable {
            /// Идентификатор магазина, для которого вы хотите провести возврат.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Source/account_id`.
            public var accountId: Swift.String
            /// Сумма возврата.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Source/amount`.
            public var amount: Components.Schemas.Amount
            /// Creates a new `Source`.
            ///
            /// - Parameters:
            ///   - accountId: Идентификатор магазина, для которого вы хотите провести возврат.
            ///   - amount: Сумма возврата.
            public init(
                accountId: Swift.String,
                amount: Components.Schemas.Amount
            ) {
                self.accountId = accountId
                self.amount = amount
            }
            public enum CodingKeys: String, CodingKey {
                case accountId = "account_id"
                case amount
            }
        }
        /// - Remark: Generated from `#/components/schemas/CapturePaymentRequest`.
        public struct CapturePaymentRequest: Codable, Hashable, Sendable {
            /// Подтверждаемая сумма списания. Должна быть меньше или равна сумме платежа. Если не указана, то списание произойдет на всю сумму платежа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CapturePaymentRequest/amount`.
            public var amount: Components.Schemas.Amount?
            /// Данные для формирования чека в онлайн-кассе.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CapturePaymentRequest/receipt`.
            public var receipt: Components.Schemas.Receipt?
            /// Данные о распределении денег — сколько и в какой магазин нужно перевести. Присутствует, если вы используете Сплитование платежей.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CapturePaymentRequest/transfers`.
            public var transfers: [Components.Schemas.Transfer]?
            /// Данные о сделке, в составе которой проходит платеж. Необходимо передавать, если вы проводите Безопасную сделку.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CapturePaymentRequest/deal`.
            public var deal: Components.Schemas.Deal?
            /// Creates a new `CapturePaymentRequest`.
            ///
            /// - Parameters:
            ///   - amount: Подтверждаемая сумма списания. Должна быть меньше или равна сумме платежа. Если не указана, то списание произойдет на всю сумму платежа.
            ///   - receipt: Данные для формирования чека в онлайн-кассе.
            ///   - transfers: Данные о распределении денег — сколько и в какой магазин нужно перевести. Присутствует, если вы используете Сплитование платежей.
            ///   - deal: Данные о сделке, в составе которой проходит платеж. Необходимо передавать, если вы проводите Безопасную сделку.
            public init(
                amount: Components.Schemas.Amount? = nil,
                receipt: Components.Schemas.Receipt? = nil,
                transfers: [Components.Schemas.Transfer]? = nil,
                deal: Components.Schemas.Deal? = nil
            ) {
                self.amount = amount
                self.receipt = receipt
                self.transfers = transfers
                self.deal = deal
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case receipt
                case transfers
                case deal
            }
        }
        /// Данные о распределении денег в магазин.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Settlement`.
        public struct Settlement: Codable, Hashable, Sendable {
            /// Тип распределения. Возможные значения:
            /// payout — выплата продавцу;
            /// refund — возврат покупателю;
            /// credit_funds — перевод вознаграждения за выданный кредит;
            /// debit_funds — возврат вознаграждения за выданный кредит.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Settlement/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case payout = "payout"
                case refund = "refund"
                case creditFunds = "credit_funds"
                case debitFunds = "debit_funds"
            }
            /// Тип распределения. Возможные значения:
            /// payout — выплата продавцу;
            /// refund — возврат покупателю;
            /// credit_funds — перевод вознаграждения за выданный кредит;
            /// debit_funds — возврат вознаграждения за выданный кредит.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Settlement/type`.
            public var _type: Components.Schemas.Settlement._TypePayload
            /// Сумма распределения.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Settlement/amount`.
            public var amount: Components.Schemas.Amount
            /// Creates a new `Settlement`.
            ///
            /// - Parameters:
            ///   - _type: Тип распределения. Возможные значения:
            ///   - amount: Сумма распределения.
            public init(
                _type: Components.Schemas.Settlement._TypePayload,
                amount: Components.Schemas.Amount
            ) {
                self._type = _type
                self.amount = amount
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case amount
            }
        }
        /// - Remark: Generated from `#/components/schemas/Refund`.
        public struct Refund: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Refund/value1`.
            public var value1: Components.Schemas.CreateRefundRequest
            /// - Remark: Generated from `#/components/schemas/Refund/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// Идентификатор возврата.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Refund/value2/id`.
                public var id: Swift.String
                /// Статус возврата. Возможные значения:
                /// - `pending` — возврат создан и ожидает подтверждения от эмитента;
                /// - `succeeded` — возврат успешно завершен;
                /// - `canceled` — возврат отменен.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Refund/value2/status`.
                @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case pending = "pending"
                    case succeeded = "succeeded"
                    case canceled = "canceled"
                }
                /// Статус возврата. Возможные значения:
                /// - `pending` — возврат создан и ожидает подтверждения от эмитента;
                /// - `succeeded` — возврат успешно завершен;
                /// - `canceled` — возврат отменен.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Refund/value2/status`.
                public var status: Components.Schemas.Refund.Value2Payload.StatusPayload
                /// Время создания возврата. Указывается по UTC и передается в формате ISO 8601.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Refund/value2/created_at`.
                public var createdAt: Foundation.Date
                /// Данные о сделке, в составе которой проходит возврат. Присутствует, если возврат происходит в рамках Безопасной сделки.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/Refund/value2/deal`.
                public var deal: Components.Schemas.Deal?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - id: Идентификатор возврата.
                ///   - status: Статус возврата. Возможные значения:
                ///   - createdAt: Время создания возврата. Указывается по UTC и передается в формате ISO 8601.
                ///   - deal: Данные о сделке, в составе которой проходит возврат. Присутствует, если возврат происходит в рамках Безопасной сделки.
                public init(
                    id: Swift.String,
                    status: Components.Schemas.Refund.Value2Payload.StatusPayload,
                    createdAt: Foundation.Date,
                    deal: Components.Schemas.Deal? = nil
                ) {
                    self.id = id
                    self.status = status
                    self.createdAt = createdAt
                    self.deal = deal
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case status
                    case createdAt = "created_at"
                    case deal
                }
            }
            /// - Remark: Generated from `#/components/schemas/Refund/value2`.
            public var value2: Components.Schemas.Refund.Value2Payload
            /// Creates a new `Refund`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.CreateRefundRequest,
                value2: Components.Schemas.Refund.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConfirmationCommon`.
        public struct ConfirmationCommon: Codable, Hashable, Sendable {
            /// Код сценария подтверждения. Возможные значения:
            /// - `redirect` — подтверждение на странице ЮKassa;
            /// - `embedded` — подтверждение через виджет ЮKassa;
            /// - `external` — подтверждение на странице партнера;
            /// - `qr` — подтверждение по QR-коду;
            /// - `mobile_application` — подтверждение через мобильное приложение.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ConfirmationCommon/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case redirect = "redirect"
                case embedded = "embedded"
                case external = "external"
                case qr = "qr"
                case mobileApplication = "mobile_application"
            }
            /// Код сценария подтверждения. Возможные значения:
            /// - `redirect` — подтверждение на странице ЮKassa;
            /// - `embedded` — подтверждение через виджет ЮKassa;
            /// - `external` — подтверждение на странице партнера;
            /// - `qr` — подтверждение по QR-коду;
            /// - `mobile_application` — подтверждение через мобильное приложение.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ConfirmationCommon/type`.
            public var _type: Components.Schemas.ConfirmationCommon._TypePayload
            /// Creates a new `ConfirmationCommon`.
            ///
            /// - Parameters:
            ///   - _type: Код сценария подтверждения. Возможные значения:
            public init(_type: Components.Schemas.ConfirmationCommon._TypePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Confirmation`.
        @frozen public enum Confirmation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Confirmation/ConfirmationEmbedded`.
            case embedded(Components.Schemas.ConfirmationEmbedded)
            /// - Remark: Generated from `#/components/schemas/Confirmation/ConfirmationExternal`.
            case external(Components.Schemas.ConfirmationExternal)
            /// - Remark: Generated from `#/components/schemas/Confirmation/ConfirmationMobileApplication`.
            case mobileApplication(Components.Schemas.ConfirmationMobileApplication)
            /// - Remark: Generated from `#/components/schemas/Confirmation/ConfirmationQr`.
            case qr(Components.Schemas.ConfirmationQr)
            /// - Remark: Generated from `#/components/schemas/Confirmation/ConfirmationRedirect`.
            case redirect(Components.Schemas.ConfirmationRedirect)
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                switch discriminator {
                case "embedded":
                    self = .embedded(try .init(from: decoder))
                case "external":
                    self = .external(try .init(from: decoder))
                case "mobile_application":
                    self = .mobileApplication(try .init(from: decoder))
                case "qr":
                    self = .qr(try .init(from: decoder))
                case "redirect":
                    self = .redirect(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys._type,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .embedded(value):
                    try value.encode(to: encoder)
                case let .external(value):
                    try value.encode(to: encoder)
                case let .mobileApplication(value):
                    try value.encode(to: encoder)
                case let .qr(value):
                    try value.encode(to: encoder)
                case let .redirect(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConfirmationRedirect`.
        public struct ConfirmationRedirect: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConfirmationRedirect/value1`.
            public var value1: Components.Schemas.ConfirmationCommon
            /// - Remark: Generated from `#/components/schemas/ConfirmationRedirect/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// URL, на который вернется пользователь после подтверждения или отмены платежа.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ConfirmationRedirect/value2/return_url`.
                public var returnUrl: Swift.String?
                /// URL, на который необходимо перенаправить пользователя для подтверждения платежа.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ConfirmationRedirect/value2/confirmation_url`.
                public var confirmationUrl: Swift.String?
                /// Требование принудительного подтверждения платежа покупателем, требование дополнительной авторизации при оплате с помощью сохраненного способа оплаты.
                /// Значение true: платеж всегда требует подтверждения покупателем, даже если способ оплаты уже был когда-то успешно использован.
                /// Значение false: не требовать от покупателя подтверждения платежа, если способ оплаты уже был когда-то успешно использован.
                /// Это поведение можно переопределить, передав true в параметре confirmation.enforce при создании платежа.
                /// Если у платежа есть признак тестовый, в этом параметре всегда будет значение true.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ConfirmationRedirect/value2/enforce`.
                public var enforce: Swift.Bool?
                /// Язык интерфейса, писем и смс, которые будут отправлены пользователю. Формат соответствует ISO/IEC 15897.
                /// Возможные значения: ru_RU, en_US. Регистр важен.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ConfirmationRedirect/value2/locale`.
                public var locale: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - returnUrl: URL, на который вернется пользователь после подтверждения или отмены платежа.
                ///   - confirmationUrl: URL, на который необходимо перенаправить пользователя для подтверждения платежа.
                ///   - enforce: Требование принудительного подтверждения платежа покупателем, требование дополнительной авторизации при оплате с помощью сохраненного способа оплаты.
                ///   - locale: Язык интерфейса, писем и смс, которые будут отправлены пользователю. Формат соответствует ISO/IEC 15897.
                public init(
                    returnUrl: Swift.String? = nil,
                    confirmationUrl: Swift.String? = nil,
                    enforce: Swift.Bool? = nil,
                    locale: Swift.String? = nil
                ) {
                    self.returnUrl = returnUrl
                    self.confirmationUrl = confirmationUrl
                    self.enforce = enforce
                    self.locale = locale
                }
                public enum CodingKeys: String, CodingKey {
                    case returnUrl = "return_url"
                    case confirmationUrl = "confirmation_url"
                    case enforce
                    case locale
                }
            }
            /// - Remark: Generated from `#/components/schemas/ConfirmationRedirect/value2`.
            public var value2: Components.Schemas.ConfirmationRedirect.Value2Payload
            /// Creates a new `ConfirmationRedirect`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.ConfirmationCommon,
                value2: Components.Schemas.ConfirmationRedirect.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConfirmationEmbedded`.
        public struct ConfirmationEmbedded: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConfirmationEmbedded/value1`.
            public var value1: Components.Schemas.ConfirmationCommon
            /// - Remark: Generated from `#/components/schemas/ConfirmationEmbedded/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// Токен для инициализации платежного виджета ЮKassa.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ConfirmationEmbedded/value2/confirmation_token`.
                public var confirmationToken: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - confirmationToken: Токен для инициализации платежного виджета ЮKassa.
                public init(confirmationToken: Swift.String? = nil) {
                    self.confirmationToken = confirmationToken
                }
                public enum CodingKeys: String, CodingKey {
                    case confirmationToken = "confirmation_token"
                }
            }
            /// - Remark: Generated from `#/components/schemas/ConfirmationEmbedded/value2`.
            public var value2: Components.Schemas.ConfirmationEmbedded.Value2Payload
            /// Creates a new `ConfirmationEmbedded`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.ConfirmationCommon,
                value2: Components.Schemas.ConfirmationEmbedded.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConfirmationExternal`.
        public struct ConfirmationExternal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConfirmationExternal/value1`.
            public var value1: Components.Schemas.ConfirmationCommon
            /// - Remark: Generated from `#/components/schemas/ConfirmationExternal/value2`.
            public var value2: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `ConfirmationExternal`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.ConfirmationCommon,
                value2: OpenAPIRuntime.OpenAPIObjectContainer
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConfirmationQr`.
        public struct ConfirmationQr: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConfirmationQr/value1`.
            public var value1: Components.Schemas.ConfirmationCommon
            /// - Remark: Generated from `#/components/schemas/ConfirmationQr/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// Данные для генерации QR-кода.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ConfirmationQr/value2/confirmation_data`.
                public var confirmationData: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - confirmationData: Данные для генерации QR-кода.
                public init(confirmationData: Swift.String? = nil) {
                    self.confirmationData = confirmationData
                }
                public enum CodingKeys: String, CodingKey {
                    case confirmationData = "confirmation_data"
                }
            }
            /// - Remark: Generated from `#/components/schemas/ConfirmationQr/value2`.
            public var value2: Components.Schemas.ConfirmationQr.Value2Payload
            /// Creates a new `ConfirmationQr`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.ConfirmationCommon,
                value2: Components.Schemas.ConfirmationQr.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConfirmationMobileApplication`.
        public struct ConfirmationMobileApplication: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConfirmationMobileApplication/value1`.
            public var value1: Components.Schemas.ConfirmationCommon
            /// - Remark: Generated from `#/components/schemas/ConfirmationMobileApplication/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// URL, на который вернется пользователь после подтверждения или отмены платежа.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ConfirmationMobileApplication/value2/return_url`.
                public var returnUrl: Swift.String
                /// URL, который необходимо открыть в мобильном приложении для подтверждения платежа.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ConfirmationMobileApplication/value2/confirmation_url`.
                public var confirmationUrl: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - returnUrl: URL, на который вернется пользователь после подтверждения или отмены платежа.
                ///   - confirmationUrl: URL, который необходимо открыть в мобильном приложении для подтверждения платежа.
                public init(
                    returnUrl: Swift.String,
                    confirmationUrl: Swift.String? = nil
                ) {
                    self.returnUrl = returnUrl
                    self.confirmationUrl = confirmationUrl
                }
                public enum CodingKeys: String, CodingKey {
                    case returnUrl = "return_url"
                    case confirmationUrl = "confirmation_url"
                }
            }
            /// - Remark: Generated from `#/components/schemas/ConfirmationMobileApplication/value2`.
            public var value2: Components.Schemas.ConfirmationMobileApplication.Value2Payload
            /// Creates a new `ConfirmationMobileApplication`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.ConfirmationCommon,
                value2: Components.Schemas.ConfirmationMobileApplication.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// Объект чека (`Receipt`) содержит актуальную информацию о чеке, созданном для платежа или возврата.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Receipt`.
        public struct Receipt: Codable, Hashable, Sendable {
            /// Идентификатор чека в ЮKassa.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/id`.
            public var id: Swift.String
            /// Тип чека в онлайн-кассе: приход (`payment`) или возврат прихода (`refund`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/type`.
            public var _type: Components.Schemas.ReceiptType
            /// Идентификатор [платежа](https://yookassa.ru/developers/api#payment_object), для которого был сформирован чек.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/payment_id`.
            public var paymentId: Swift.String?
            /// Идентификатор [возврата](https://yookassa.ru/developers/api#refund_object), для которого был сформирован чек. 
            /// Отсутствует в чеке платежа."
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/refund_id`.
            public var refundId: Swift.String?
            /// Статус доставки данных для чека в онлайн-кассу. Возможные значения:
            ///   - `pending` — данные в обработке;
            ///   - `succeeded` — чек успешно зарегистрирован;
            ///   - `canceled` — чек зарегистрировать не удалось; 
            ///   если используете [Чеки от ЮKassa](https://yookassa.ru/developers/payment-acceptance/receipts/54fz/yoomoney/basics), обратитесь в техническую поддержку, в остальных случаях сформируйте чек вручную."
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/status`.
            public var status: Components.Schemas.ReceiptStatus
            /// Номер фискального документа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/fiscal_document_number`.
            public var fiscalDocumentNumber: Swift.String?
            /// Номер фискального накопителя в кассовом аппарате.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/fiscal_storage_number`.
            public var fiscalStorageNumber: Swift.String?
            /// Фискальный признак чека. Формируется фискальным накопителем на основе данных, переданных для регистрации чека.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/fiscal_attribute`.
            public var fiscalAttribute: Swift.String?
            /// Дата и время формирования чека в фискальном накопителе. Указывается в формате [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/registered_at`.
            public var registeredAt: Foundation.Date?
            /// Идентификатор чека в онлайн-кассе. Присутствует, если чек удалось зарегистрировать.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/fiscal_provider_id`.
            public var fiscalProviderId: Swift.String?
            /// Список товаров в чеке (не более 100 товаров).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/items`.
            public var items: [Components.Schemas.ReceiptItem]
            /// Перечень совершенных расчетов.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/settlements`.
            public var settlements: [Components.Schemas.Settlement]?
            /// Идентификатор магазина, от имени которого нужно отправить чек. Выдается ЮKassa. Присутствует, если вы используете [Сплитование платежей](https://yookassa.ru/developers/solutions-for-platforms/split-payments/basics).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/on_behalf_of`.
            public var onBehalfOf: Swift.String?
            /// Система налогообложения магазина (тег в 54 ФЗ — 1055).\n\nДля сторонних онлайн-касс: обязательный параметр, если вы используете онлайн-кассу Атол Онлайн, обновленную до ФФД 1.2, или у вас несколько систем налогообложения, в остальных случаях не передается. [Перечень возможных значений](https://yookassa.ru/developers/payment-acceptance/receipts/54fz/other-services/parameters-values#tax-systems)
            /// Для Чеков от ЮKassa: параметр передавать не нужно, ЮKassa его проигнорирует.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/tax_system_code`.
            public var taxSystemCode: Components.Schemas.TaxSystemCode?
            /// Отраслевой реквизит предмета расчета (тег в 54 ФЗ — 1260).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/receipt_industry_details`.
            public var receiptIndustryDetails: [Components.Schemas.IndustryDetails]?
            /// Операционный реквизит чека (тег в 54 ФЗ — 1270).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Receipt/receipt_operational_details`.
            public var receiptOperationalDetails: Components.Schemas.OperationalDetails?
            /// Creates a new `Receipt`.
            ///
            /// - Parameters:
            ///   - id: Идентификатор чека в ЮKassa.
            ///   - _type: Тип чека в онлайн-кассе: приход (`payment`) или возврат прихода (`refund`).
            ///   - paymentId: Идентификатор [платежа](https://yookassa.ru/developers/api#payment_object), для которого был сформирован чек.
            ///   - refundId: Идентификатор [возврата](https://yookassa.ru/developers/api#refund_object), для которого был сформирован чек. 
            ///   - status: Статус доставки данных для чека в онлайн-кассу. Возможные значения:
            ///   - fiscalDocumentNumber: Номер фискального документа.
            ///   - fiscalStorageNumber: Номер фискального накопителя в кассовом аппарате.
            ///   - fiscalAttribute: Фискальный признак чека. Формируется фискальным накопителем на основе данных, переданных для регистрации чека.
            ///   - registeredAt: Дата и время формирования чека в фискальном накопителе. Указывается в формате [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
            ///   - fiscalProviderId: Идентификатор чека в онлайн-кассе. Присутствует, если чек удалось зарегистрировать.
            ///   - items: Список товаров в чеке (не более 100 товаров).
            ///   - settlements: Перечень совершенных расчетов.
            ///   - onBehalfOf: Идентификатор магазина, от имени которого нужно отправить чек. Выдается ЮKassa. Присутствует, если вы используете [Сплитование платежей](https://yookassa.ru/developers/solutions-for-platforms/split-payments/basics).
            ///   - taxSystemCode: Система налогообложения магазина (тег в 54 ФЗ — 1055).\n\nДля сторонних онлайн-касс: обязательный параметр, если вы используете онлайн-кассу Атол Онлайн, обновленную до ФФД 1.2, или у вас несколько систем налогообложения, в остальных случаях не передается. [Перечень возможных значений](https://yookassa.ru/developers/payment-acceptance/receipts/54fz/other-services/parameters-values#tax-systems)
            ///   - receiptIndustryDetails: Отраслевой реквизит предмета расчета (тег в 54 ФЗ — 1260).
            ///   - receiptOperationalDetails: Операционный реквизит чека (тег в 54 ФЗ — 1270).
            public init(
                id: Swift.String,
                _type: Components.Schemas.ReceiptType,
                paymentId: Swift.String? = nil,
                refundId: Swift.String? = nil,
                status: Components.Schemas.ReceiptStatus,
                fiscalDocumentNumber: Swift.String? = nil,
                fiscalStorageNumber: Swift.String? = nil,
                fiscalAttribute: Swift.String? = nil,
                registeredAt: Foundation.Date? = nil,
                fiscalProviderId: Swift.String? = nil,
                items: [Components.Schemas.ReceiptItem],
                settlements: [Components.Schemas.Settlement]? = nil,
                onBehalfOf: Swift.String? = nil,
                taxSystemCode: Components.Schemas.TaxSystemCode? = nil,
                receiptIndustryDetails: [Components.Schemas.IndustryDetails]? = nil,
                receiptOperationalDetails: Components.Schemas.OperationalDetails? = nil
            ) {
                self.id = id
                self._type = _type
                self.paymentId = paymentId
                self.refundId = refundId
                self.status = status
                self.fiscalDocumentNumber = fiscalDocumentNumber
                self.fiscalStorageNumber = fiscalStorageNumber
                self.fiscalAttribute = fiscalAttribute
                self.registeredAt = registeredAt
                self.fiscalProviderId = fiscalProviderId
                self.items = items
                self.settlements = settlements
                self.onBehalfOf = onBehalfOf
                self.taxSystemCode = taxSystemCode
                self.receiptIndustryDetails = receiptIndustryDetails
                self.receiptOperationalDetails = receiptOperationalDetails
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case paymentId = "payment_id"
                case refundId = "refund_id"
                case status
                case fiscalDocumentNumber = "fiscal_document_number"
                case fiscalStorageNumber = "fiscal_storage_number"
                case fiscalAttribute = "fiscal_attribute"
                case registeredAt = "registered_at"
                case fiscalProviderId = "fiscal_provider_id"
                case items
                case settlements
                case onBehalfOf = "on_behalf_of"
                case taxSystemCode = "tax_system_code"
                case receiptIndustryDetails = "receipt_industry_details"
                case receiptOperationalDetails = "receipt_operational_details"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ReceiptType`.
        @frozen public enum ReceiptType: String, Codable, Hashable, Sendable, CaseIterable {
            case payment = "payment"
            case refund = "refund"
        }
        /// - Remark: Generated from `#/components/schemas/ReceiptStatus`.
        @frozen public enum ReceiptStatus: String, Codable, Hashable, Sendable, CaseIterable {
            case pending = "pending"
            case succeeded = "succeeded"
            case canceled = "canceled"
        }
        /// Информация о товаре.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ReceiptItem`.
        public struct ReceiptItem: Codable, Hashable, Sendable {
            /// Наименование товара (от 1 до 128 символов). Тег в 54 ФЗ — 1030.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/description`.
            public var description: Swift.String
            /// Цена товара (тег в 54 ФЗ — 1079).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/amount`.
            public var amount: Components.Schemas.Amount
            /// Количество товара (тег в 54 ФЗ — 1023). Для чеков по 54-ФЗ: можно передать целое или дробное число. Разделитель дробной части — точка, разделитель тысяч отсутствует. Максимально возможное значение и максимальное количество знаков после точки (для дробных значений) зависят от модели вашей онлайн-кассы. Для чеков от ЮKassa максимально возможное значение — 99999.999, не более 3 знаков после точки. Для чеков самозанятых: только целые положительные числа (без точки и дробной части).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/quantity`.
            public var quantity: Swift.String
            /// Ставка НДС (тег в 54 ФЗ — 1199). Для чеков по 54-ФЗ — перечень возможных значений. Для чеков самозанятых — фиксированное значение: `1`
            /// Возможные значения — число от 1 до 10.
            /// С 1 января 2025 года вводятся новые ставки НДС 5% и 7% (коды ставок: 7, 8, 9, 10).
            ///
            /// | Код | Ставка НДС |
            /// |-----|------------|
            /// | 1   | Без НДС |
            /// | 2   | НДС по ставке 0% |
            /// | 3   | НДС по ставке 10% |
            /// | 4   | НДС по ставке 20% |
            /// | 5   | НДС по расчетной ставке 10/110 |
            /// | 6   | НДС по расчетной ставке 20/120 |
            /// | 7   | НДС по ставке 5% |
            /// | 8   | НДС по ставке 7% |
            /// | 9   | НДС по расчетной ставке 5/105 |
            /// | 10  | НДС по расчетной ставке 7/107 |
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/vat_code`.
            @frozen public enum VatCodePayload: Int, Codable, Hashable, Sendable, CaseIterable {
                case _1 = 1
                case _2 = 2
                case _3 = 3
                case _4 = 4
                case _5 = 5
                case _6 = 6
                case _7 = 7
                case _8 = 8
                case _9 = 9
                case _10 = 10
            }
            /// Ставка НДС (тег в 54 ФЗ — 1199). Для чеков по 54-ФЗ — перечень возможных значений. Для чеков самозанятых — фиксированное значение: `1`
            /// Возможные значения — число от 1 до 10.
            /// С 1 января 2025 года вводятся новые ставки НДС 5% и 7% (коды ставок: 7, 8, 9, 10).
            ///
            /// | Код | Ставка НДС |
            /// |-----|------------|
            /// | 1   | Без НДС |
            /// | 2   | НДС по ставке 0% |
            /// | 3   | НДС по ставке 10% |
            /// | 4   | НДС по ставке 20% |
            /// | 5   | НДС по расчетной ставке 10/110 |
            /// | 6   | НДС по расчетной ставке 20/120 |
            /// | 7   | НДС по ставке 5% |
            /// | 8   | НДС по ставке 7% |
            /// | 9   | НДС по расчетной ставке 5/105 |
            /// | 10  | НДС по расчетной ставке 7/107 |
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/vat_code`.
            public var vatCode: Components.Schemas.ReceiptItem.VatCodePayload
            /// Признак способа расчета
            ///
            /// | Значение | Описание |
            /// |----------|----------|
            /// | full_prepayment | Полная предоплата |
            /// | partial_prepayment | Частичная предоплата |
            /// | advance | Аванс |
            /// | full_payment | Полный расчет |
            /// | partial_payment | Частичный расчет и кредит |
            /// | credit | Кредит |
            /// | credit_payment | Выплата по кредиту |
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/payment_mode`.
            @frozen public enum PaymentModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fullPrepayment = "full_prepayment"
                case partialPrepayment = "partial_prepayment"
                case advance = "advance"
                case fullPayment = "full_payment"
                case partialPayment = "partial_payment"
                case credit = "credit"
                case creditPayment = "credit_payment"
            }
            /// Признак способа расчета
            ///
            /// | Значение | Описание |
            /// |----------|----------|
            /// | full_prepayment | Полная предоплата |
            /// | partial_prepayment | Частичная предоплата |
            /// | advance | Аванс |
            /// | full_payment | Полный расчет |
            /// | partial_payment | Частичный расчет и кредит |
            /// | credit | Кредит |
            /// | credit_payment | Выплата по кредиту |
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/payment_mode`.
            public var paymentMode: Components.Schemas.ReceiptItem.PaymentModePayload?
            /// Признак предмета расчета (тег в 54 ФЗ — 1212) то, за что принимается оплата, например товар, услуга.
            ///
            /// | Значение | Описание |
            /// |----------|----------|
            /// | commodity | Товар |
            /// | excise | Подакцизный товар |
            /// | job | Работа |
            /// | service | Услуга |
            /// | payment | Платеж |
            /// | casino | Платеж казино |
            /// | gambling_bet | Ставка в азартной игре |
            /// | gambling_prize | Выигрыш азартной игры |
            /// | lottery | Лотерейный билет |
            /// | lottery_prize | Выигрыш в лотерею |
            /// | intellectual_activity | Результаты интеллектуальной деятельности |
            /// | agent_commission | Агентское вознаграждение |
            /// | property_right | Имущественное право |
            /// | non_operating_gain | Внереализационный доход |
            /// | insurance_premium | Страховой сбор |
            /// | sales_tax | Торговый сбор |
            /// | resort_fee | Курортный сбор |
            /// | composite | Несколько вариантов |
            /// | another | Другое |
            /// | marked | Товар, подлежащий маркировке (ФФД 1.2) |
            /// | non_marked | Товар без маркировки (ФФД 1.2) |
            /// | marked_excise | Маркированный подакцизный товар (ФФД 1.2) |
            /// | non_marked_excise | Немаркированный подакцизный товар (ФФД 1.2) |
            /// | fine | Выплата |
            /// | tax | Страховые взносы |
            /// | lien | Залог |
            /// | cost | Расход |
            /// | agent_withdrawals | Выдача денежных средств |
            /// | pension_insurance_without_payouts | Взносы на обязательное пенсионное страхование ИП |
            /// | pension_insurance_with_payouts | Взносы на обязательное пенсионное страхование |
            /// | health_insurance_without_payouts | Взносы на обязательное медицинское страхование ИП |
            /// | health_insurance_with_payouts | Взносы на обязательное медицинское страхование |
            /// | health_insurance | Взносы на обязательное социальное страхование |
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/payment_subject`.
            @frozen public enum PaymentSubjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case commodity = "commodity"
                case excise = "excise"
                case job = "job"
                case service = "service"
                case payment = "payment"
                case casino = "casino"
                case gamblingBet = "gambling_bet"
                case gamblingPrize = "gambling_prize"
                case lottery = "lottery"
                case lotteryPrize = "lottery_prize"
                case intellectualActivity = "intellectual_activity"
                case agentCommission = "agent_commission"
                case propertyRight = "property_right"
                case nonOperatingGain = "non_operating_gain"
                case insurancePremium = "insurance_premium"
                case salesTax = "sales_tax"
                case resortFee = "resort_fee"
                case composite = "composite"
                case another = "another"
                case marked = "marked"
                case nonMarked = "non_marked"
                case markedExcise = "marked_excise"
                case nonMarkedExcise = "non_marked_excise"
                case fine = "fine"
                case tax = "tax"
                case lien = "lien"
                case cost = "cost"
                case agentWithdrawals = "agent_withdrawals"
                case pensionInsuranceWithoutPayouts = "pension_insurance_without_payouts"
                case pensionInsuranceWithPayouts = "pension_insurance_with_payouts"
                case healthInsuranceWithoutPayouts = "health_insurance_without_payouts"
                case healthInsuranceWithPayouts = "health_insurance_with_payouts"
                case healthInsurance = "health_insurance"
            }
            /// Признак предмета расчета (тег в 54 ФЗ — 1212) то, за что принимается оплата, например товар, услуга.
            ///
            /// | Значение | Описание |
            /// |----------|----------|
            /// | commodity | Товар |
            /// | excise | Подакцизный товар |
            /// | job | Работа |
            /// | service | Услуга |
            /// | payment | Платеж |
            /// | casino | Платеж казино |
            /// | gambling_bet | Ставка в азартной игре |
            /// | gambling_prize | Выигрыш азартной игры |
            /// | lottery | Лотерейный билет |
            /// | lottery_prize | Выигрыш в лотерею |
            /// | intellectual_activity | Результаты интеллектуальной деятельности |
            /// | agent_commission | Агентское вознаграждение |
            /// | property_right | Имущественное право |
            /// | non_operating_gain | Внереализационный доход |
            /// | insurance_premium | Страховой сбор |
            /// | sales_tax | Торговый сбор |
            /// | resort_fee | Курортный сбор |
            /// | composite | Несколько вариантов |
            /// | another | Другое |
            /// | marked | Товар, подлежащий маркировке (ФФД 1.2) |
            /// | non_marked | Товар без маркировки (ФФД 1.2) |
            /// | marked_excise | Маркированный подакцизный товар (ФФД 1.2) |
            /// | non_marked_excise | Немаркированный подакцизный товар (ФФД 1.2) |
            /// | fine | Выплата |
            /// | tax | Страховые взносы |
            /// | lien | Залог |
            /// | cost | Расход |
            /// | agent_withdrawals | Выдача денежных средств |
            /// | pension_insurance_without_payouts | Взносы на обязательное пенсионное страхование ИП |
            /// | pension_insurance_with_payouts | Взносы на обязательное пенсионное страхование |
            /// | health_insurance_without_payouts | Взносы на обязательное медицинское страхование ИП |
            /// | health_insurance_with_payouts | Взносы на обязательное медицинское страхование |
            /// | health_insurance | Взносы на обязательное социальное страхование |
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/payment_subject`.
            public var paymentSubject: Components.Schemas.ReceiptItem.PaymentSubjectPayload?
            /// Единица измерения товара (тег в 54 ФЗ — 2108). Обязательный параметр, если используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2.
            ///
            /// | Значение | Описание |
            /// |----------|----------|
            /// | piece | Штука, единица товара |
            /// | gram | Грамм |
            /// | kilogram | Килограмм |
            /// | ton | Тонна |
            /// | centimeter | Сантиметр |
            /// | decimeter | Дециметр |
            /// | meter | Метр |
            /// | square_centimeter | Квадратный сантиметр |
            /// | square_decimeter | Квадратный дециметр |
            /// | square_meter | Квадратный метр |
            /// | milliliter | Миллилитр |
            /// | liter | Литр |
            /// | cubic_meter | Кубический метр |
            /// | kilowatt_hour | Килловат-час |
            /// | gigacalorie | Гигакалория |
            /// | day | Сутки |
            /// | hour | Час |
            /// | minute | Минута |
            /// | second | Секунда |
            /// | kilobyte | Килобайт |
            /// | megabyte | Мегабайт |
            /// | gigabyte | Гигабайт |
            /// | terabyte | Терабайт |
            /// | another | Другое |
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/measure`.
            @frozen public enum MeasurePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case piece = "piece"
                case gram = "gram"
                case kilogram = "kilogram"
                case ton = "ton"
                case centimeter = "centimeter"
                case decimeter = "decimeter"
                case meter = "meter"
                case squareCentimeter = "square_centimeter"
                case squareDecimeter = "square_decimeter"
                case squareMeter = "square_meter"
                case milliliter = "milliliter"
                case liter = "liter"
                case cubicMeter = "cubic_meter"
                case kilowattHour = "kilowatt_hour"
                case gigacalorie = "gigacalorie"
                case day = "day"
                case hour = "hour"
                case minute = "minute"
                case second = "second"
                case kilobyte = "kilobyte"
                case megabyte = "megabyte"
                case gigabyte = "gigabyte"
                case terabyte = "terabyte"
                case another = "another"
            }
            /// Единица измерения товара (тег в 54 ФЗ — 2108). Обязательный параметр, если используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2.
            ///
            /// | Значение | Описание |
            /// |----------|----------|
            /// | piece | Штука, единица товара |
            /// | gram | Грамм |
            /// | kilogram | Килограмм |
            /// | ton | Тонна |
            /// | centimeter | Сантиметр |
            /// | decimeter | Дециметр |
            /// | meter | Метр |
            /// | square_centimeter | Квадратный сантиметр |
            /// | square_decimeter | Квадратный дециметр |
            /// | square_meter | Квадратный метр |
            /// | milliliter | Миллилитр |
            /// | liter | Литр |
            /// | cubic_meter | Кубический метр |
            /// | kilowatt_hour | Килловат-час |
            /// | gigacalorie | Гигакалория |
            /// | day | Сутки |
            /// | hour | Час |
            /// | minute | Минута |
            /// | second | Секунда |
            /// | kilobyte | Килобайт |
            /// | megabyte | Мегабайт |
            /// | gigabyte | Гигабайт |
            /// | terabyte | Терабайт |
            /// | another | Другое |
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/measure`.
            public var measure: Components.Schemas.ReceiptItem.MeasurePayload?
            /// Дробное количество маркированного товара (тег в 54 ФЗ — 1291). Обязательный параметр, если одновременно выполняются эти условия: вы используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2; товар нужно маркировать; поле `measure` имеет значение `piece`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/mark_quantity`.
            public var markQuantity: Components.Schemas.MarkQuantity?
            /// Код страны происхождения товара по общероссийскому классификатору стран мира (OК (MК (ИСО 3166) 004-97) 025-2001). Тег в 54 ФЗ — 1230. Пример: `RU`. Можно передавать, если используете онлайн-кассу Orange Data, Кит Инвест.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/country_of_origin_code`.
            public var countryOfOriginCode: Swift.String?
            /// Номер таможенной декларации (от 1 до 32 символов). Тег в 54 ФЗ — 1231. Можно передавать, если используете онлайн-кассу Orange Data, Кит Инвест.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/customs_declaration_number`.
            public var customsDeclarationNumber: Swift.String?
            /// Сумма акциза товара с учетом копеек (тег в 54 ФЗ — 1229). Десятичное число с точностью до 2 знаков после точки. Можно передавать, если используете онлайн-кассу Orange Data, Кит Инвест.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/excise`.
            public var excise: Swift.String?
            /// Код товара (тег в 54 ФЗ — 1162) — уникальный номер, который присваивается экземпляру товара при маркировке. Формат: число в шестнадцатеричном представлении с пробелами. Максимальная длина — 32 байта. Пример: `00 00 00 01 00 21 FA 41 00 23 05 41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 12 00 AB 00`. Обязательный параметр, если одновременно выполняются эти условия: вы используете онлайн-кассу, обновленную до ФФД 1.05; товар нужно маркировать.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/product_code`.
            public var productCode: Swift.String?
            /// Код товара (тег в 54 ФЗ — 1163). Обязательный параметр, если одновременно выполняются эти условия: вы используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2; товар нужно маркировать. Должно быть заполнено хотя бы одно поле.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/mark_code_info`.
            public var markCodeInfo: Components.Schemas.MarkCodeInfo?
            /// Режим обработки кода маркировки (тег в 54 ФЗ — 2102). Обязательный параметр, если одновременно выполняются эти условия: вы используете Чеки от ЮKassa или онлайн-кассу Атол Онлайн или BusinessRu, обновленную до ФФД 1.2; товар нужно маркировать. Должен принимать значение равное «0».
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/mark_mode`.
            public var markMode: Swift.String?
            /// Отраслевой реквизит предмета расчета (тег в 54 ФЗ — 1260). Можно передавать, если используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptItem/payment_subject_industry_details`.
            public var paymentSubjectIndustryDetails: [Components.Schemas.IndustryDetails]?
            /// Creates a new `ReceiptItem`.
            ///
            /// - Parameters:
            ///   - description: Наименование товара (от 1 до 128 символов). Тег в 54 ФЗ — 1030.
            ///   - amount: Цена товара (тег в 54 ФЗ — 1079).
            ///   - quantity: Количество товара (тег в 54 ФЗ — 1023). Для чеков по 54-ФЗ: можно передать целое или дробное число. Разделитель дробной части — точка, разделитель тысяч отсутствует. Максимально возможное значение и максимальное количество знаков после точки (для дробных значений) зависят от модели вашей онлайн-кассы. Для чеков от ЮKassa максимально возможное значение — 99999.999, не более 3 знаков после точки. Для чеков самозанятых: только целые положительные числа (без точки и дробной части).
            ///   - vatCode: Ставка НДС (тег в 54 ФЗ — 1199). Для чеков по 54-ФЗ — перечень возможных значений. Для чеков самозанятых — фиксированное значение: `1`
            ///   - paymentMode: Признак способа расчета
            ///   - paymentSubject: Признак предмета расчета (тег в 54 ФЗ — 1212) то, за что принимается оплата, например товар, услуга.
            ///   - measure: Единица измерения товара (тег в 54 ФЗ — 2108). Обязательный параметр, если используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2.
            ///   - markQuantity: Дробное количество маркированного товара (тег в 54 ФЗ — 1291). Обязательный параметр, если одновременно выполняются эти условия: вы используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2; товар нужно маркировать; поле `measure` имеет значение `piece`.
            ///   - countryOfOriginCode: Код страны происхождения товара по общероссийскому классификатору стран мира (OК (MК (ИСО 3166) 004-97) 025-2001). Тег в 54 ФЗ — 1230. Пример: `RU`. Можно передавать, если используете онлайн-кассу Orange Data, Кит Инвест.
            ///   - customsDeclarationNumber: Номер таможенной декларации (от 1 до 32 символов). Тег в 54 ФЗ — 1231. Можно передавать, если используете онлайн-кассу Orange Data, Кит Инвест.
            ///   - excise: Сумма акциза товара с учетом копеек (тег в 54 ФЗ — 1229). Десятичное число с точностью до 2 знаков после точки. Можно передавать, если используете онлайн-кассу Orange Data, Кит Инвест.
            ///   - productCode: Код товара (тег в 54 ФЗ — 1162) — уникальный номер, который присваивается экземпляру товара при маркировке. Формат: число в шестнадцатеричном представлении с пробелами. Максимальная длина — 32 байта. Пример: `00 00 00 01 00 21 FA 41 00 23 05 41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 12 00 AB 00`. Обязательный параметр, если одновременно выполняются эти условия: вы используете онлайн-кассу, обновленную до ФФД 1.05; товар нужно маркировать.
            ///   - markCodeInfo: Код товара (тег в 54 ФЗ — 1163). Обязательный параметр, если одновременно выполняются эти условия: вы используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2; товар нужно маркировать. Должно быть заполнено хотя бы одно поле.
            ///   - markMode: Режим обработки кода маркировки (тег в 54 ФЗ — 2102). Обязательный параметр, если одновременно выполняются эти условия: вы используете Чеки от ЮKassa или онлайн-кассу Атол Онлайн или BusinessRu, обновленную до ФФД 1.2; товар нужно маркировать. Должен принимать значение равное «0».
            ///   - paymentSubjectIndustryDetails: Отраслевой реквизит предмета расчета (тег в 54 ФЗ — 1260). Можно передавать, если используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2.
            public init(
                description: Swift.String,
                amount: Components.Schemas.Amount,
                quantity: Swift.String,
                vatCode: Components.Schemas.ReceiptItem.VatCodePayload,
                paymentMode: Components.Schemas.ReceiptItem.PaymentModePayload? = nil,
                paymentSubject: Components.Schemas.ReceiptItem.PaymentSubjectPayload? = nil,
                measure: Components.Schemas.ReceiptItem.MeasurePayload? = nil,
                markQuantity: Components.Schemas.MarkQuantity? = nil,
                countryOfOriginCode: Swift.String? = nil,
                customsDeclarationNumber: Swift.String? = nil,
                excise: Swift.String? = nil,
                productCode: Swift.String? = nil,
                markCodeInfo: Components.Schemas.MarkCodeInfo? = nil,
                markMode: Swift.String? = nil,
                paymentSubjectIndustryDetails: [Components.Schemas.IndustryDetails]? = nil
            ) {
                self.description = description
                self.amount = amount
                self.quantity = quantity
                self.vatCode = vatCode
                self.paymentMode = paymentMode
                self.paymentSubject = paymentSubject
                self.measure = measure
                self.markQuantity = markQuantity
                self.countryOfOriginCode = countryOfOriginCode
                self.customsDeclarationNumber = customsDeclarationNumber
                self.excise = excise
                self.productCode = productCode
                self.markCodeInfo = markCodeInfo
                self.markMode = markMode
                self.paymentSubjectIndustryDetails = paymentSubjectIndustryDetails
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case amount
                case quantity
                case vatCode = "vat_code"
                case paymentMode = "payment_mode"
                case paymentSubject = "payment_subject"
                case measure
                case markQuantity = "mark_quantity"
                case countryOfOriginCode = "country_of_origin_code"
                case customsDeclarationNumber = "customs_declaration_number"
                case excise
                case productCode = "product_code"
                case markCodeInfo = "mark_code_info"
                case markMode = "mark_mode"
                case paymentSubjectIndustryDetails = "payment_subject_industry_details"
            }
        }
        /// Информация о плательщике.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Customer`.
        public struct Customer: Codable, Hashable, Sendable {
            /// Для юрлица — название организации, для ИП и физического лица — ФИО.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Customer/full_name`.
            public var fullName: Swift.String?
            /// ИНН плательщика (10 или 12 цифр).
            /// Пример: 123456789.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Customer/inn`.
            public var inn: Swift.String?
            /// E-mail плательщика в формате RFC 822.
            /// Пример: example@example.com.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Customer/email`.
            public var email: Swift.String?
            /// Номер телефона плательщика в формате ITU-T E.164.
            /// Пример: +79000000000.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Customer/phone`.
            public var phone: Swift.String?
            /// Creates a new `Customer`.
            ///
            /// - Parameters:
            ///   - fullName: Для юрлица — название организации, для ИП и физического лица — ФИО.
            ///   - inn: ИНН плательщика (10 или 12 цифр).
            ///   - email: E-mail плательщика в формате RFC 822.
            ///   - phone: Номер телефона плательщика в формате ITU-T E.164.
            public init(
                fullName: Swift.String? = nil,
                inn: Swift.String? = nil,
                email: Swift.String? = nil,
                phone: Swift.String? = nil
            ) {
                self.fullName = fullName
                self.inn = inn
                self.email = email
                self.phone = phone
            }
            public enum CodingKeys: String, CodingKey {
                case fullName = "full_name"
                case inn
                case email
                case phone
            }
        }
        /// Данные о сделке.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Deal`.
        public struct Deal: Codable, Hashable, Sendable {
            /// Идентификатор сделки.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/id`.
            public var id: Swift.String?
            /// Данные о распределении денег.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/settlements`.
            public var settlements: [Components.Schemas.Settlement]?
            /// Статус сделки. Возможные значения:
            /// opened — сделка открыта;
            /// closed — сделка закрыта.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case opened = "opened"
                case closed = "closed"
            }
            /// Статус сделки. Возможные значения:
            /// opened — сделка открыта;
            /// closed — сделка закрыта.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/status`.
            public var status: Components.Schemas.Deal.StatusPayload?
            /// Баланс сделки.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/balance`.
            public var balance: Components.Schemas.Amount?
            /// Сумма вознаграждения продавца.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/payout_balance`.
            public var payoutBalance: Components.Schemas.Amount?
            /// Описание сделки.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/description`.
            public var description: Swift.String?
            /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/metadata`.
            public struct MetadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `MetadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/metadata`.
            public var metadata: Components.Schemas.Deal.MetadataPayload?
            /// Время создания сделки. Указывается по UTC и передается в формате ISO 8601.
            /// Пример: 2017-11-03T11:52:31.827Z.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/created_at`.
            public var createdAt: Foundation.Date?
            /// Время автоматического закрытия сделки. Указывается по UTC и передается в формате ISO 8601.
            /// Пример: 2017-11-03T11:52:31.827Z.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/expires_at`.
            public var expiresAt: Foundation.Date?
            /// Момент перечисления вам вознаграждения платформы. Возможные значения:
            /// payment_succeeded — после успешной оплаты;
            /// deal_closed — после закрытия сделки.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/fee_moment`.
            @frozen public enum FeeMomentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case paymentSucceeded = "payment_succeeded"
                case dealClosed = "deal_closed"
            }
            /// Момент перечисления вам вознаграждения платформы. Возможные значения:
            /// payment_succeeded — после успешной оплаты;
            /// deal_closed — после закрытия сделки.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/fee_moment`.
            public var feeMoment: Components.Schemas.Deal.FeeMomentPayload?
            /// Признак тестовой операции.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Deal/test`.
            public var test: Swift.Bool?
            /// Creates a new `Deal`.
            ///
            /// - Parameters:
            ///   - id: Идентификатор сделки.
            ///   - settlements: Данные о распределении денег.
            ///   - status: Статус сделки. Возможные значения:
            ///   - balance: Баланс сделки.
            ///   - payoutBalance: Сумма вознаграждения продавца.
            ///   - description: Описание сделки.
            ///   - metadata: Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа).
            ///   - createdAt: Время создания сделки. Указывается по UTC и передается в формате ISO 8601.
            ///   - expiresAt: Время автоматического закрытия сделки. Указывается по UTC и передается в формате ISO 8601.
            ///   - feeMoment: Момент перечисления вам вознаграждения платформы. Возможные значения:
            ///   - test: Признак тестовой операции.
            public init(
                id: Swift.String? = nil,
                settlements: [Components.Schemas.Settlement]? = nil,
                status: Components.Schemas.Deal.StatusPayload? = nil,
                balance: Components.Schemas.Amount? = nil,
                payoutBalance: Components.Schemas.Amount? = nil,
                description: Swift.String? = nil,
                metadata: Components.Schemas.Deal.MetadataPayload? = nil,
                createdAt: Foundation.Date? = nil,
                expiresAt: Foundation.Date? = nil,
                feeMoment: Components.Schemas.Deal.FeeMomentPayload? = nil,
                test: Swift.Bool? = nil
            ) {
                self.id = id
                self.settlements = settlements
                self.status = status
                self.balance = balance
                self.payoutBalance = payoutBalance
                self.description = description
                self.metadata = metadata
                self.createdAt = createdAt
                self.expiresAt = expiresAt
                self.feeMoment = feeMoment
                self.test = test
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case settlements
                case status
                case balance
                case payoutBalance = "payout_balance"
                case description
                case metadata
                case createdAt = "created_at"
                case expiresAt = "expires_at"
                case feeMoment = "fee_moment"
                case test
            }
        }
        /// Данные о распределении денег между магазинами. Присутствует, если вы используете Сплитование платежей.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Transfer`.
        public struct Transfer: Codable, Hashable, Sendable {
            /// Идентификатор магазина, в пользу которого вы принимаете оплату.
            /// Формат: идентификатор магазина в ЮKassa.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/account_id`.
            public var accountId: Swift.String
            /// Сумма перевода.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/amount`.
            public var amount: Components.Schemas.Amount
            /// Комиссия за проданные товары и услуги, которая удерживается с магазина в вашу пользу.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/platform_fee_amount`.
            public var platformFeeAmount: Components.Schemas.Amount
            /// Описание транзакции, которое продавец увидит в личном кабинете ЮKassa. (например: «Заказ маркетплейса №72»).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/description`.
            public var description: Swift.String?
            /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/metadata`.
            public struct MetadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `MetadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Transfer/metadata`.
            public var metadata: Components.Schemas.Transfer.MetadataPayload?
            /// Creates a new `Transfer`.
            ///
            /// - Parameters:
            ///   - accountId: Идентификатор магазина, в пользу которого вы принимаете оплату.
            ///   - amount: Сумма перевода.
            ///   - platformFeeAmount: Комиссия за проданные товары и услуги, которая удерживается с магазина в вашу пользу.
            ///   - description: Описание транзакции, которое продавец увидит в личном кабинете ЮKassa. (например: «Заказ маркетплейса №72»).
            ///   - metadata: Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа).
            public init(
                accountId: Swift.String,
                amount: Components.Schemas.Amount,
                platformFeeAmount: Components.Schemas.Amount,
                description: Swift.String? = nil,
                metadata: Components.Schemas.Transfer.MetadataPayload? = nil
            ) {
                self.accountId = accountId
                self.amount = amount
                self.platformFeeAmount = platformFeeAmount
                self.description = description
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case accountId = "account_id"
                case amount
                case platformFeeAmount = "platform_fee_amount"
                case description
                case metadata
            }
        }
        /// Данные для формирования чека в онлайн-кассе (для соблюдения 54-ФЗ).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreatePaymentReceipt`.
        public struct CreatePaymentReceipt: Codable, Hashable, Sendable {
            /// Информация о плательщике.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentReceipt/customer`.
            public var customer: Components.Schemas.Customer?
            /// Список товаров в заказе.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentReceipt/items`.
            public var items: [Components.Schemas.ReceiptItem]
            /// Система налогообложения магазина (тег в 54 ФЗ — 1055).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentReceipt/tax_system_code`.
            public var taxSystemCode: Components.Schemas.TaxSystemCode?
            /// Номер телефона плательщика в формате ITU-T E.164.
            /// Пример: +79000000000.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentReceipt/phone`.
            public var phone: Swift.String?
            /// E-mail плательщика в формате RFC 822.
            /// Пример: example@example.com.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentReceipt/email`.
            public var email: Swift.String?
            /// Отраслевой реквизит чека.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentReceipt/receipt_industry_details`.
            public var receiptIndustryDetails: [Components.Schemas.IndustryDetails]?
            /// Операционный реквизит чека.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreatePaymentReceipt/receipt_operational_details`.
            public var receiptOperationalDetails: Components.Schemas.OperationalDetails?
            /// Creates a new `CreatePaymentReceipt`.
            ///
            /// - Parameters:
            ///   - customer: Информация о плательщике.
            ///   - items: Список товаров в заказе.
            ///   - taxSystemCode: Система налогообложения магазина (тег в 54 ФЗ — 1055).
            ///   - phone: Номер телефона плательщика в формате ITU-T E.164.
            ///   - email: E-mail плательщика в формате RFC 822.
            ///   - receiptIndustryDetails: Отраслевой реквизит чека.
            ///   - receiptOperationalDetails: Операционный реквизит чека.
            public init(
                customer: Components.Schemas.Customer? = nil,
                items: [Components.Schemas.ReceiptItem],
                taxSystemCode: Components.Schemas.TaxSystemCode? = nil,
                phone: Swift.String? = nil,
                email: Swift.String? = nil,
                receiptIndustryDetails: [Components.Schemas.IndustryDetails]? = nil,
                receiptOperationalDetails: Components.Schemas.OperationalDetails? = nil
            ) {
                self.customer = customer
                self.items = items
                self.taxSystemCode = taxSystemCode
                self.phone = phone
                self.email = email
                self.receiptIndustryDetails = receiptIndustryDetails
                self.receiptOperationalDetails = receiptOperationalDetails
            }
            public enum CodingKeys: String, CodingKey {
                case customer
                case items
                case taxSystemCode = "tax_system_code"
                case phone
                case email
                case receiptIndustryDetails = "receipt_industry_details"
                case receiptOperationalDetails = "receipt_operational_details"
            }
        }
        /// Операционный реквизит чека (тег в 54 ФЗ — 1270). Можно передавать, если используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2.
        ///
        /// - Remark: Generated from `#/components/schemas/OperationalDetails`.
        public struct OperationalDetails: Codable, Hashable, Sendable {
            /// Идентификатор операции (тег в 54 ФЗ — 1271). Число от 0 до 255.
            ///
            /// - Remark: Generated from `#/components/schemas/OperationalDetails/operation_id`.
            public var operationId: Swift.Int
            /// Данные операции (тег в 54 ФЗ — 1272).
            ///
            /// - Remark: Generated from `#/components/schemas/OperationalDetails/value`.
            public var value: Swift.String
            /// Время создания операции (тег в 54 ФЗ — 1273). Указывается по UTC и передается в формате ISO 8601. Пример, 2017-11-03T11:52:31.827Z
            ///
            /// - Remark: Generated from `#/components/schemas/OperationalDetails/created_at`.
            public var createdAt: Foundation.Date
            /// Creates a new `OperationalDetails`.
            ///
            /// - Parameters:
            ///   - operationId: Идентификатор операции (тег в 54 ФЗ — 1271). Число от 0 до 255.
            ///   - value: Данные операции (тег в 54 ФЗ — 1272).
            ///   - createdAt: Время создания операции (тег в 54 ФЗ — 1273). Указывается по UTC и передается в формате ISO 8601. Пример, 2017-11-03T11:52:31.827Z
            public init(
                operationId: Swift.Int,
                value: Swift.String,
                createdAt: Foundation.Date
            ) {
                self.operationId = operationId
                self.value = value
                self.createdAt = createdAt
            }
            public enum CodingKeys: String, CodingKey {
                case operationId = "operation_id"
                case value
                case createdAt = "created_at"
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataApplePay`.
        public struct PaymentMethodDataApplePay: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataApplePay/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataApplePay/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataApplePay/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Закодированные данные для проведения оплаты через Apple Pay.
                /// Передается JSON-объект в виде строки, содержащий параметры `paymentData`, полученные от Apple Pay.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataApplePay/value2/payment_data`.
                public var paymentData: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - paymentData: Закодированные данные для проведения оплаты через Apple Pay.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    paymentData: Swift.String? = nil
                ) {
                    self._type = _type
                    self.paymentData = paymentData
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case paymentData = "payment_data"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataApplePay/value2`.
            public var value2: Components.Schemas.PaymentMethodDataApplePay.Value2Payload
            /// Creates a new `PaymentMethodDataApplePay`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataApplePay.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataGooglePay`.
        public struct PaymentMethodDataGooglePay: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataGooglePay/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataGooglePay/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataGooglePay/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Закодированные данные для проведения оплаты через Google Pay.
                /// Передается JSON-объект в виде строки, содержащий параметры `paymentMethodToken`, полученные от Google Pay.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataGooglePay/value2/payment_data`.
                public var paymentData: Swift.String?
                /// Токен для проведения оплаты через Google Pay.
                /// Альтернатива параметру payment_data. Передается в виде строки, содержащей параметр `paymentMethodToken`, полученный от Google Pay.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataGooglePay/value2/payment_method_token`.
                public var paymentMethodToken: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - paymentData: Закодированные данные для проведения оплаты через Google Pay.
                ///   - paymentMethodToken: Токен для проведения оплаты через Google Pay.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    paymentData: Swift.String? = nil,
                    paymentMethodToken: Swift.String? = nil
                ) {
                    self._type = _type
                    self.paymentData = paymentData
                    self.paymentMethodToken = paymentMethodToken
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case paymentData = "payment_data"
                    case paymentMethodToken = "payment_method_token"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataGooglePay/value2`.
            public var value2: Components.Schemas.PaymentMethodDataGooglePay.Value2Payload
            /// Creates a new `PaymentMethodDataGooglePay`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataGooglePay.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataInstallments`.
        public struct PaymentMethodDataInstallments: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataInstallments/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataInstallments/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataInstallments/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: OpenAPIRuntime.OpenAPIValueContainer? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataInstallments/value2`.
            public var value2: Components.Schemas.PaymentMethodDataInstallments.Value2Payload
            /// Creates a new `PaymentMethodDataInstallments`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataInstallments.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSBP`.
        public struct PaymentMethodDataSBP: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSBP/value1`.
            public var value1: Components.Schemas.PaymentMethodDataBase
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSBP/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSBP/value2/type`.
                public var _type: OpenAPIRuntime.OpenAPIValueContainer?
                /// Идентификатор покупателя в вашей системе. Например, электронная почта или номер телефона.
                /// Не более 200 символов.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSBP/value2/merchant_client_id`.
                public var merchantClientId: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - merchantClientId: Идентификатор покупателя в вашей системе. Например, электронная почта или номер телефона.
                public init(
                    _type: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                    merchantClientId: Swift.String? = nil
                ) {
                    self._type = _type
                    self.merchantClientId = merchantClientId
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case merchantClientId = "merchant_client_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/PaymentMethodDataSBP/value2`.
            public var value2: Components.Schemas.PaymentMethodDataSBP.Value2Payload
            /// Creates a new `PaymentMethodDataSBP`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PaymentMethodDataBase,
                value2: Components.Schemas.PaymentMethodDataSBP.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// Дробное количество маркированного товара (тег в 54 ФЗ — 1291).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/MarkQuantity`.
        public struct MarkQuantity: Codable, Hashable, Sendable {
            /// Числитель — количество продаваемых товаров из одной потребительской упаковки (тег в 54 ФЗ — 1293). Не может превышать `denominator`.
            ///
            /// - Remark: Generated from `#/components/schemas/MarkQuantity/numerator`.
            public var numerator: Swift.Int
            /// Знаменатель — общее количество товаров в потребительской упаковке (тег в 54 ФЗ — 1294).
            ///
            /// - Remark: Generated from `#/components/schemas/MarkQuantity/denominator`.
            public var denominator: Swift.Int
            /// Creates a new `MarkQuantity`.
            ///
            /// - Parameters:
            ///   - numerator: Числитель — количество продаваемых товаров из одной потребительской упаковки (тег в 54 ФЗ — 1293). Не может превышать `denominator`.
            ///   - denominator: Знаменатель — общее количество товаров в потребительской упаковке (тег в 54 ФЗ — 1294).
            public init(
                numerator: Swift.Int,
                denominator: Swift.Int
            ) {
                self.numerator = numerator
                self.denominator = denominator
            }
            public enum CodingKeys: String, CodingKey {
                case numerator
                case denominator
            }
        }
        /// Код товара (тег в 54 ФЗ — 1163).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/MarkCodeInfo`.
        public struct MarkCodeInfo: Codable, Hashable, Sendable {
            /// Код маркировки товара в том виде, в котором он был прочитан сканером (тег в 54 ФЗ — 2000). Обязательный параметр, если передается mark_code.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/mark_code_raw`.
            public var markCodeRaw: Swift.String?
            /// Код маркировки товара (тег в 54 ФЗ — 2100). Обязательный параметр, если передается mark_code_raw.
            /// example: "010460406000590021N4N57RTCBUZTQ\\u001d2403054002410161218\\u001d1424010191ffd0\\u001g92tIAF/YVpU4roQS3M/m4z78yFq0nc/WsSmLeX6QkF/YVWwy5IMYAeiQ91Xa2m/fFSJcOkb2N+uUUtfr4n0mOX0Q=="
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/mark_code`.
            public var markCode: Swift.String?
            /// Нераспознанный код товара (тег в 54 ФЗ — 2108). Передается, если невозможно определить формат марки.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/unknown`.
            public var unknown: Swift.String?
            /// Код товара в формате EAN-8 (тег в 54 ФЗ — 2101). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/ean_8`.
            public var ean8: Swift.String?
            /// Код товара в формате EAN-13 (тег в 54 ФЗ — 2102). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/ean_13`.
            public var ean13: Swift.String?
            /// Код товара в формате ITF-14 (тег в 54 ФЗ — 2103). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/itf_14`.
            public var itf14: Swift.String?
            /// Код товара в формате GS1.0 (тег в 54 ФЗ — 2104). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/gs_10`.
            public var gs10: Swift.String?
            /// Код товара в формате GS1.M (тег в 54 ФЗ — 2105). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/gs_1m`.
            public var gs1m: Swift.String?
            /// Код товара в формате короткого кода маркировки (тег в 54 ФЗ — 2106). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/short`.
            public var short: Swift.String?
            /// Контрольно-идентификационный знак мехового изделия (тег в 54 ФЗ — 2107). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/fur`.
            public var fur: Swift.String?
            /// Код товара в формате ЕГАИС-2.0 (тег в 54 ФЗ — 2108). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/egais_20`.
            public var egais20: Swift.String?
            /// Код товара в формате ЕГАИС-3.0 (тег в 54 ФЗ — 2109). Тип кода маркировки товара.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/MarkCodeInfo/egais_30`.
            public var egais30: Swift.String?
            /// Creates a new `MarkCodeInfo`.
            ///
            /// - Parameters:
            ///   - markCodeRaw: Код маркировки товара в том виде, в котором он был прочитан сканером (тег в 54 ФЗ — 2000). Обязательный параметр, если передается mark_code.
            ///   - markCode: Код маркировки товара (тег в 54 ФЗ — 2100). Обязательный параметр, если передается mark_code_raw.
            ///   - unknown: Нераспознанный код товара (тег в 54 ФЗ — 2108). Передается, если невозможно определить формат марки.
            ///   - ean8: Код товара в формате EAN-8 (тег в 54 ФЗ — 2101). Тип кода маркировки товара.
            ///   - ean13: Код товара в формате EAN-13 (тег в 54 ФЗ — 2102). Тип кода маркировки товара.
            ///   - itf14: Код товара в формате ITF-14 (тег в 54 ФЗ — 2103). Тип кода маркировки товара.
            ///   - gs10: Код товара в формате GS1.0 (тег в 54 ФЗ — 2104). Тип кода маркировки товара.
            ///   - gs1m: Код товара в формате GS1.M (тег в 54 ФЗ — 2105). Тип кода маркировки товара.
            ///   - short: Код товара в формате короткого кода маркировки (тег в 54 ФЗ — 2106). Тип кода маркировки товара.
            ///   - fur: Контрольно-идентификационный знак мехового изделия (тег в 54 ФЗ — 2107). Тип кода маркировки товара.
            ///   - egais20: Код товара в формате ЕГАИС-2.0 (тег в 54 ФЗ — 2108). Тип кода маркировки товара.
            ///   - egais30: Код товара в формате ЕГАИС-3.0 (тег в 54 ФЗ — 2109). Тип кода маркировки товара.
            public init(
                markCodeRaw: Swift.String? = nil,
                markCode: Swift.String? = nil,
                unknown: Swift.String? = nil,
                ean8: Swift.String? = nil,
                ean13: Swift.String? = nil,
                itf14: Swift.String? = nil,
                gs10: Swift.String? = nil,
                gs1m: Swift.String? = nil,
                short: Swift.String? = nil,
                fur: Swift.String? = nil,
                egais20: Swift.String? = nil,
                egais30: Swift.String? = nil
            ) {
                self.markCodeRaw = markCodeRaw
                self.markCode = markCode
                self.unknown = unknown
                self.ean8 = ean8
                self.ean13 = ean13
                self.itf14 = itf14
                self.gs10 = gs10
                self.gs1m = gs1m
                self.short = short
                self.fur = fur
                self.egais20 = egais20
                self.egais30 = egais30
            }
            public enum CodingKeys: String, CodingKey {
                case markCodeRaw = "mark_code_raw"
                case markCode = "mark_code"
                case unknown
                case ean8 = "ean_8"
                case ean13 = "ean_13"
                case itf14 = "itf_14"
                case gs10 = "gs_10"
                case gs1m = "gs_1m"
                case short
                case fur
                case egais20 = "egais_20"
                case egais30 = "egais_30"
            }
        }
        /// Отраслевой реквизит предмета расчета (тег в 54 ФЗ — 1260).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/IndustryDetails`.
        public struct IndustryDetails: Codable, Hashable, Sendable {
            /// Идентификатор ФОИВ. Число от 3 до 12 цифр.
            /// 001 — Минфин России
            /// 002 — Минсельхоз России
            /// 003 — Минкультуры России
            /// 004 — МВД России
            /// 005 — Минздрав России
            /// 006 — Минтранс России
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IndustryDetails/federal_id`.
            public var federalId: Swift.String
            /// Значение отраслевого реквизита. Максимальная длина строки — 256 символов.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IndustryDetails/value`.
            public var value: Swift.String
            /// Дата нормативного акта федерального органа исполнительной власти, регулирующего соответствующую отрасль (сферу) деятельности.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IndustryDetails/document_date`.
            public var documentDate: Swift.String?
            /// Номер нормативного акта федерального органа исполнительной власти, регулирующего соответствующую отрасль (сферу) деятельности.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/IndustryDetails/document_number`.
            public var documentNumber: Swift.String?
            /// Creates a new `IndustryDetails`.
            ///
            /// - Parameters:
            ///   - federalId: Идентификатор ФОИВ. Число от 3 до 12 цифр.
            ///   - value: Значение отраслевого реквизита. Максимальная длина строки — 256 символов.
            ///   - documentDate: Дата нормативного акта федерального органа исполнительной власти, регулирующего соответствующую отрасль (сферу) деятельности.
            ///   - documentNumber: Номер нормативного акта федерального органа исполнительной власти, регулирующего соответствующую отрасль (сферу) деятельности.
            public init(
                federalId: Swift.String,
                value: Swift.String,
                documentDate: Swift.String? = nil,
                documentNumber: Swift.String? = nil
            ) {
                self.federalId = federalId
                self.value = value
                self.documentDate = documentDate
                self.documentNumber = documentNumber
            }
            public enum CodingKeys: String, CodingKey {
                case federalId = "federal_id"
                case value
                case documentDate = "document_date"
                case documentNumber = "document_number"
            }
        }
        /// Система налогообложения магазина (тег в 54 ФЗ — 1055).
        ///
        /// | Код | Система налогообложения |
        /// |-----|-------------------------|
        /// | 1   | Общая система налогообложения |
        /// | 2   | Упрощенная (УСН, доходы) |
        /// | 3   | Упрощенная (УСН, доходы минус расходы) |
        /// | 4   | Единый налог на вмененный доход (ЕНВД) |
        /// | 5   | Единый сельскохозяйственный налог (ЕСН) |
        /// | 6   | Патентная система налогообложения |
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TaxSystemCode`.
        @frozen public enum TaxSystemCode: Int, Codable, Hashable, Sendable, CaseIterable {
            case _1 = 1
            case _2 = 2
            case _3 = 3
            case _4 = 4
            case _5 = 5
            case _6 = 6
        }
        /// - Remark: Generated from `#/components/schemas/ReceiptsList`.
        public struct ReceiptsList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReceiptsList/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ReceiptsList/type`.
            public var _type: Components.Schemas.ReceiptsList._TypePayload
            /// - Remark: Generated from `#/components/schemas/ReceiptsList/items`.
            public var items: [Components.Schemas.Receipt]
            /// Токен для получения следующей страницы списка.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptsList/next_cursor`.
            public var nextCursor: Swift.String?
            /// Creates a new `ReceiptsList`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - items:
            ///   - nextCursor: Токен для получения следующей страницы списка.
            public init(
                _type: Components.Schemas.ReceiptsList._TypePayload,
                items: [Components.Schemas.Receipt],
                nextCursor: Swift.String? = nil
            ) {
                self._type = _type
                self.items = items
                self.nextCursor = nextCursor
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case items
                case nextCursor = "next_cursor"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest`.
        public struct CreateReceiptRequest: Codable, Hashable, Sendable {
            /// Информация о пользователе. Необходимо указать как минимум контактные данные: для Чеков от ЮKassa — электронную почту (customer.email), в остальных случаях — электронную почту (customer.email) или номер телефона (customer.phone).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest/customer`.
            public var customer: Components.Schemas.Customer
            /// Список товаров в заказе. Для чеков по 54-ФЗ можно передать не более 100 товаров, для чеков самозанятых — не более шести.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest/items`.
            public var items: [Components.Schemas.ReceiptItem]
            /// Система налогообложения магазина (тег в 54 ФЗ — 1055).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest/tax_system_code`.
            public var taxSystemCode: Components.Schemas.TaxSystemCode?
            /// Идентификатор платежа в ЮKassa. Указывается, если чек выдается после успешного платежа.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest/payment_id`.
            public var paymentId: Swift.String?
            /// Идентификатор возврата в ЮKassa. Указывается, если чек выдается после успешного возврата.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest/refund_id`.
            public var refundId: Swift.String?
            /// Отраслевой реквизит чека.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest/receipt_industry_details`.
            public var receiptIndustryDetails: [Components.Schemas.IndustryDetails]?
            /// Операционный реквизит чека.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest/receipt_operational_details`.
            public var receiptOperationalDetails: Components.Schemas.OperationalDetails?
            /// Признак отправки чека по электронной почте или SMS. Значение по умолчанию — true.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateReceiptRequest/send`.
            public var send: Swift.Bool?
            /// Creates a new `CreateReceiptRequest`.
            ///
            /// - Parameters:
            ///   - customer: Информация о пользователе. Необходимо указать как минимум контактные данные: для Чеков от ЮKassa — электронную почту (customer.email), в остальных случаях — электронную почту (customer.email) или номер телефона (customer.phone).
            ///   - items: Список товаров в заказе. Для чеков по 54-ФЗ можно передать не более 100 товаров, для чеков самозанятых — не более шести.
            ///   - taxSystemCode: Система налогообложения магазина (тег в 54 ФЗ — 1055).
            ///   - paymentId: Идентификатор платежа в ЮKassa. Указывается, если чек выдается после успешного платежа.
            ///   - refundId: Идентификатор возврата в ЮKassa. Указывается, если чек выдается после успешного возврата.
            ///   - receiptIndustryDetails: Отраслевой реквизит чека.
            ///   - receiptOperationalDetails: Операционный реквизит чека.
            ///   - send: Признак отправки чека по электронной почте или SMS. Значение по умолчанию — true.
            public init(
                customer: Components.Schemas.Customer,
                items: [Components.Schemas.ReceiptItem],
                taxSystemCode: Components.Schemas.TaxSystemCode? = nil,
                paymentId: Swift.String? = nil,
                refundId: Swift.String? = nil,
                receiptIndustryDetails: [Components.Schemas.IndustryDetails]? = nil,
                receiptOperationalDetails: Components.Schemas.OperationalDetails? = nil,
                send: Swift.Bool? = nil
            ) {
                self.customer = customer
                self.items = items
                self.taxSystemCode = taxSystemCode
                self.paymentId = paymentId
                self.refundId = refundId
                self.receiptIndustryDetails = receiptIndustryDetails
                self.receiptOperationalDetails = receiptOperationalDetails
                self.send = send
            }
            public enum CodingKeys: String, CodingKey {
                case customer
                case items
                case taxSystemCode = "tax_system_code"
                case paymentId = "payment_id"
                case refundId = "refund_id"
                case receiptIndustryDetails = "receipt_industry_details"
                case receiptOperationalDetails = "receipt_operational_details"
                case send
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// Идентификатор платежа.
        ///
        /// - Remark: Generated from `#/components/parameters/PaymentId`.
        public typealias PaymentId = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequest/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequest.Body) {
                self.body = body
            }
        }
        public struct Unauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Unauthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.Unauthorized.Body
            /// Creates a new `Unauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.Unauthorized.Body) {
                self.body = body
            }
        }
        public struct NotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotFound/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotFound/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.NotFound.Body
            /// Creates a new `NotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.NotFound.Body) {
                self.body = body
            }
        }
        public struct TooManyRequests: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/TooManyRequests/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/TooManyRequests/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.TooManyRequests.Body
            /// Creates a new `TooManyRequests`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.TooManyRequests.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Список платежей
    ///
    /// Возвращает список платежей с возможностью фильтрации и постраничной выборки.
    ///
    /// - Remark: HTTP `GET /payments`.
    /// - Remark: Generated from `#/paths//payments/get(getPaymentsList)`.
    public enum GetPaymentsList {
        public static let id: Swift.String = "getPaymentsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/payments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Фильтр по времени создания платежа. Возвращаются платежи, созданные после указанного времени.
                ///
                /// - Remark: Generated from `#/paths/payments/GET/query/created_at.gte`.
                public var createdAt_gte: Foundation.Date?
                /// Фильтр по времени создания платежа. Возвращаются платежи, созданные до указанного времени.
                ///
                /// - Remark: Generated from `#/paths/payments/GET/query/created_at.lte`.
                public var createdAt_lte: Foundation.Date?
                /// Фильтр по статусу платежа.
                ///
                /// - Remark: Generated from `#/paths/payments/GET/query/status`.
                public var status: Components.Schemas.PaymentStatus?
                /// Ограничение количества объектов платежа, отображаемых на одной странице выдачи.
                ///
                /// - Remark: Generated from `#/paths/payments/GET/query/limit`.
                public var limit: Swift.Int?
                /// Токен для получения следующей страницы выборки.
                ///
                /// - Remark: Generated from `#/paths/payments/GET/query/cursor`.
                public var cursor: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - createdAt_gte: Фильтр по времени создания платежа. Возвращаются платежи, созданные после указанного времени.
                ///   - createdAt_lte: Фильтр по времени создания платежа. Возвращаются платежи, созданные до указанного времени.
                ///   - status: Фильтр по статусу платежа.
                ///   - limit: Ограничение количества объектов платежа, отображаемых на одной странице выдачи.
                ///   - cursor: Токен для получения следующей страницы выборки.
                public init(
                    createdAt_gte: Foundation.Date? = nil,
                    createdAt_lte: Foundation.Date? = nil,
                    status: Components.Schemas.PaymentStatus? = nil,
                    limit: Swift.Int? = nil,
                    cursor: Swift.String? = nil
                ) {
                    self.createdAt_gte = createdAt_gte
                    self.createdAt_lte = createdAt_lte
                    self.status = status
                    self.limit = limit
                    self.cursor = cursor
                }
            }
            public var query: Operations.GetPaymentsList.Input.Query
            /// - Remark: Generated from `#/paths/payments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPaymentsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPaymentsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetPaymentsList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetPaymentsList.Input.Query = .init(),
                headers: Operations.GetPaymentsList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/payments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/payments/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PaymentsList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PaymentsList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetPaymentsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetPaymentsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Список платежей
            ///
            /// - Remark: Generated from `#/paths//payments/get(getPaymentsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetPaymentsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetPaymentsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//payments/get(getPaymentsList)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//payments/get(getPaymentsList)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//payments/get(getPaymentsList)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Создание платежа
    ///
    /// Чтобы принять оплату, необходимо создать объект платежа — `Payment`. Он содержит всю необходимую информацию для проведения оплаты (сумму, валюту и статус). У платежа линейный жизненный цикл, он последовательно переходит из статуса в статус.
    ///
    ///
    /// - Remark: HTTP `POST /payments`.
    /// - Remark: Generated from `#/paths//payments/post(createPayment)`.
    public enum CreatePayment {
        public static let id: Swift.String = "createPayment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/payments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreatePayment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreatePayment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreatePayment.Input.Headers
            /// - Remark: Generated from `#/paths/payments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/payments/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreatePaymentRequest)
            }
            public var body: Operations.CreatePayment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreatePayment.Input.Headers = .init(),
                body: Operations.CreatePayment.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/payments/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/payments/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Payment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Payment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreatePayment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreatePayment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Платеж создан
            ///
            /// - Remark: Generated from `#/paths//payments/post(createPayment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreatePayment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreatePayment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//payments/post(createPayment)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//payments/post(createPayment)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//payments/post(createPayment)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Информация о платеже
    ///
    /// Возвращает информацию о платеже по его уникальному идентификатору.
    ///
    ///
    /// - Remark: HTTP `GET /payments/{payment_id}`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/get(getPayment)`.
    public enum GetPayment {
        public static let id: Swift.String = "getPayment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/payments/{payment_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Идентификатор платежа.
                ///
                /// - Remark: Generated from `#/paths/payments/{payment_id}/GET/path/payment_id`.
                public var paymentId: Components.Parameters.PaymentId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - paymentId: Идентификатор платежа.
                public init(paymentId: Components.Parameters.PaymentId) {
                    self.paymentId = paymentId
                }
            }
            public var path: Operations.GetPayment.Input.Path
            /// - Remark: Generated from `#/paths/payments/{payment_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPayment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPayment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetPayment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetPayment.Input.Path,
                headers: Operations.GetPayment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/payments/{payment_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/payments/{payment_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Payment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Payment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetPayment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetPayment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Информация о платеже
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/get(getPayment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetPayment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetPayment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/get(getPayment)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/get(getPayment)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Ресурс не найден
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/get(getPayment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/get(getPayment)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Подтверждение платежа
    ///
    /// Подтверждает вашу готовность принять платеж. После подтверждения платеж перейдет в статус `succeeded`. Это значит, что вы можете выдать товар или оказать услугу пользователю.
    ///
    /// Подтвердить можно только платеж в статусе `waiting_for_capture` и только в течение определенного времени (зависит от способа оплаты). Если вы не подтвердите платеж в отведенное время, он автоматически перейдет в статус `canceled`, и деньги вернутся пользователю.
    ///
    ///
    /// - Remark: HTTP `POST /payments/{payment_id}/capture`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/capture/post(capturePayment)`.
    public enum CapturePayment {
        public static let id: Swift.String = "capturePayment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/payments/{payment_id}/capture/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Идентификатор платежа.
                ///
                /// - Remark: Generated from `#/paths/payments/{payment_id}/capture/POST/path/payment_id`.
                public var paymentId: Components.Parameters.PaymentId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - paymentId: Идентификатор платежа.
                public init(paymentId: Components.Parameters.PaymentId) {
                    self.paymentId = paymentId
                }
            }
            public var path: Operations.CapturePayment.Input.Path
            /// - Remark: Generated from `#/paths/payments/{payment_id}/capture/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CapturePayment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CapturePayment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CapturePayment.Input.Headers
            /// - Remark: Generated from `#/paths/payments/{payment_id}/capture/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/payments/{payment_id}/capture/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CapturePaymentRequest)
            }
            public var body: Operations.CapturePayment.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CapturePayment.Input.Path,
                headers: Operations.CapturePayment.Input.Headers = .init(),
                body: Operations.CapturePayment.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/payments/{payment_id}/capture/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/payments/{payment_id}/capture/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Payment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Payment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CapturePayment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CapturePayment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Платеж подтвержден
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/capture/post(capturePayment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CapturePayment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CapturePayment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/capture/post(capturePayment)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/capture/post(capturePayment)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Ресурс не найден
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/capture/post(capturePayment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/capture/post(capturePayment)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Отмена платежа
    ///
    /// Отменяет платеж, находящийся в статусе `waiting_for_capture`. 
    /// Отмена платежа невозможна, если платеж уже подтвержден.
    ///
    ///
    /// - Remark: HTTP `POST /payments/{payment_id}/cancel`.
    /// - Remark: Generated from `#/paths//payments/{payment_id}/cancel/post(cancelPayment)`.
    public enum CancelPayment {
        public static let id: Swift.String = "cancelPayment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/payments/{payment_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Идентификатор платежа.
                ///
                /// - Remark: Generated from `#/paths/payments/{payment_id}/cancel/POST/path/payment_id`.
                public var paymentId: Components.Parameters.PaymentId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - paymentId: Идентификатор платежа.
                public init(paymentId: Components.Parameters.PaymentId) {
                    self.paymentId = paymentId
                }
            }
            public var path: Operations.CancelPayment.Input.Path
            /// - Remark: Generated from `#/paths/payments/{payment_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelPayment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelPayment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CancelPayment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CancelPayment.Input.Path,
                headers: Operations.CancelPayment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/payments/{payment_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/payments/{payment_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Payment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Payment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CancelPayment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CancelPayment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Платеж отменен
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/cancel/post(cancelPayment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CancelPayment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CancelPayment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/cancel/post(cancelPayment)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/cancel/post(cancelPayment)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Ресурс не найден
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/cancel/post(cancelPayment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//payments/{payment_id}/cancel/post(cancelPayment)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Список возвратов
    ///
    /// Возвращает список возвратов с возможностью фильтрации и постраничной выборки.
    ///
    /// - Remark: HTTP `GET /refunds`.
    /// - Remark: Generated from `#/paths//refunds/get(getRefundsList)`.
    public enum GetRefundsList {
        public static let id: Swift.String = "getRefundsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/refunds/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Фильтр по времени создания возврата. Возвращаются возвраты, созданные после указанного времени.
                ///
                /// - Remark: Generated from `#/paths/refunds/GET/query/created_at.gte`.
                public var createdAt_gte: Foundation.Date?
                /// Фильтр по времени создания возврата. Возвращаются возвраты, созданные до указанного времени.
                ///
                /// - Remark: Generated from `#/paths/refunds/GET/query/created_at.lte`.
                public var createdAt_lte: Foundation.Date?
                /// - Remark: Generated from `#/paths/refunds/GET/query/status`.
                @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case pending = "pending"
                    case succeeded = "succeeded"
                    case canceled = "canceled"
                }
                /// Фильтр по статусу возврата.
                ///
                /// - Remark: Generated from `#/paths/refunds/GET/query/status`.
                public var status: Operations.GetRefundsList.Input.Query.StatusPayload?
                /// Фильтр по идентификатору платежа.
                ///
                /// - Remark: Generated from `#/paths/refunds/GET/query/payment_id`.
                public var paymentId: Swift.String?
                /// Ограничение количества объектов возврата, отображаемых на одной странице выдачи.
                ///
                /// - Remark: Generated from `#/paths/refunds/GET/query/limit`.
                public var limit: Swift.Int?
                /// Токен для получения следующей страницы выборки.
                ///
                /// - Remark: Generated from `#/paths/refunds/GET/query/cursor`.
                public var cursor: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - createdAt_gte: Фильтр по времени создания возврата. Возвращаются возвраты, созданные после указанного времени.
                ///   - createdAt_lte: Фильтр по времени создания возврата. Возвращаются возвраты, созданные до указанного времени.
                ///   - status: Фильтр по статусу возврата.
                ///   - paymentId: Фильтр по идентификатору платежа.
                ///   - limit: Ограничение количества объектов возврата, отображаемых на одной странице выдачи.
                ///   - cursor: Токен для получения следующей страницы выборки.
                public init(
                    createdAt_gte: Foundation.Date? = nil,
                    createdAt_lte: Foundation.Date? = nil,
                    status: Operations.GetRefundsList.Input.Query.StatusPayload? = nil,
                    paymentId: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    cursor: Swift.String? = nil
                ) {
                    self.createdAt_gte = createdAt_gte
                    self.createdAt_lte = createdAt_lte
                    self.status = status
                    self.paymentId = paymentId
                    self.limit = limit
                    self.cursor = cursor
                }
            }
            public var query: Operations.GetRefundsList.Input.Query
            /// - Remark: Generated from `#/paths/refunds/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetRefundsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetRefundsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetRefundsList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetRefundsList.Input.Query = .init(),
                headers: Operations.GetRefundsList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/refunds/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/refunds/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/refunds/GET/responses/200/content/json/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case list = "list"
                        }
                        /// - Remark: Generated from `#/paths/refunds/GET/responses/200/content/json/type`.
                        public var _type: Operations.GetRefundsList.Output.Ok.Body.JsonPayload._TypePayload
                        /// - Remark: Generated from `#/paths/refunds/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.Refund]
                        /// Токен для получения следующей страницы списка.
                        ///
                        /// - Remark: Generated from `#/paths/refunds/GET/responses/200/content/json/next_cursor`.
                        public var nextCursor: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type:
                        ///   - items:
                        ///   - nextCursor: Токен для получения следующей страницы списка.
                        public init(
                            _type: Operations.GetRefundsList.Output.Ok.Body.JsonPayload._TypePayload,
                            items: [Components.Schemas.Refund],
                            nextCursor: Swift.String? = nil
                        ) {
                            self._type = _type
                            self.items = items
                            self.nextCursor = nextCursor
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case items
                            case nextCursor = "next_cursor"
                        }
                    }
                    /// - Remark: Generated from `#/paths/refunds/GET/responses/200/content/application\/json`.
                    case json(Operations.GetRefundsList.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetRefundsList.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetRefundsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetRefundsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Список возвратов
            ///
            /// - Remark: Generated from `#/paths//refunds/get(getRefundsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetRefundsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetRefundsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//refunds/get(getRefundsList)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//refunds/get(getRefundsList)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//refunds/get(getRefundsList)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Создание возврата
    ///
    /// Создает возврат платежа — `Refund`. Возвращает успешно завершенный платеж по уникальному идентификатору платежа.
    ///
    ///
    /// - Remark: HTTP `POST /refunds`.
    /// - Remark: Generated from `#/paths//refunds/post(createRefund)`.
    public enum CreateRefund {
        public static let id: Swift.String = "createRefund"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/refunds/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateRefund.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateRefund.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateRefund.Input.Headers
            /// - Remark: Generated from `#/paths/refunds/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/refunds/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateRefundRequest)
            }
            public var body: Operations.CreateRefund.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateRefund.Input.Headers = .init(),
                body: Operations.CreateRefund.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/refunds/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/refunds/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Refund)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Refund {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateRefund.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateRefund.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Возврат создан
            ///
            /// - Remark: Generated from `#/paths//refunds/post(createRefund)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateRefund.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateRefund.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//refunds/post(createRefund)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//refunds/post(createRefund)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Ресурс не найден
            ///
            /// - Remark: Generated from `#/paths//refunds/post(createRefund)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//refunds/post(createRefund)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Информация о возврате
    ///
    /// Возвращает информацию о возврате по его уникальному идентификатору.
    ///
    ///
    /// - Remark: HTTP `GET /refunds/{refund_id}`.
    /// - Remark: Generated from `#/paths//refunds/{refund_id}/get(getRefund)`.
    public enum GetRefund {
        public static let id: Swift.String = "getRefund"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/refunds/{refund_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Идентификатор возврата.
                ///
                /// - Remark: Generated from `#/paths/refunds/{refund_id}/GET/path/refund_id`.
                public var refundId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - refundId: Идентификатор возврата.
                public init(refundId: Swift.String) {
                    self.refundId = refundId
                }
            }
            public var path: Operations.GetRefund.Input.Path
            /// - Remark: Generated from `#/paths/refunds/{refund_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetRefund.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetRefund.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetRefund.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetRefund.Input.Path,
                headers: Operations.GetRefund.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/refunds/{refund_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/refunds/{refund_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Refund)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Refund {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetRefund.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetRefund.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Информация о возврате
            ///
            /// - Remark: Generated from `#/paths//refunds/{refund_id}/get(getRefund)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetRefund.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetRefund.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//refunds/{refund_id}/get(getRefund)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//refunds/{refund_id}/get(getRefund)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Ресурс не найден
            ///
            /// - Remark: Generated from `#/paths//refunds/{refund_id}/get(getRefund)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//refunds/{refund_id}/get(getRefund)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Список чеков
    ///
    /// Возвращает список чеков с возможностью фильтрации и постраничной выборки.
    ///
    /// Список чеков возвращается отсортированным по времени создания в порядке убывания.
    /// Если результатов больше, чем задано в параметре limit, список будет выводиться фрагментами.
    /// В этом случае в ответе на запрос вернется фрагмент списка и параметр next_cursor с указателем на следующий фрагмент.
    ///
    ///
    /// - Remark: HTTP `GET /receipts`.
    /// - Remark: Generated from `#/paths//receipts/get(getReceiptsList)`.
    public enum GetReceiptsList {
        public static let id: Swift.String = "getReceiptsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/receipts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Фильтр по идентификатору платежа
                ///
                /// - Remark: Generated from `#/paths/receipts/GET/query/payment_id`.
                public var paymentId: Swift.String?
                /// Фильтр по идентификатору возврата
                ///
                /// - Remark: Generated from `#/paths/receipts/GET/query/refund_id`.
                public var refundId: Swift.String?
                /// - Remark: Generated from `#/paths/receipts/GET/query/status`.
                @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case pending = "pending"
                    case succeeded = "succeeded"
                    case canceled = "canceled"
                }
                /// Фильтр по статусу чека. Возможные значения:
                /// * pending — чек в очереди на создание
                /// * succeeded — чек успешно создан
                /// * canceled — чек не удалось создать
                ///
                ///
                /// - Remark: Generated from `#/paths/receipts/GET/query/status`.
                public var status: Operations.GetReceiptsList.Input.Query.StatusPayload?
                /// Количество чеков на странице. По умолчанию 20, максимум 100.
                ///
                /// - Remark: Generated from `#/paths/receipts/GET/query/limit`.
                public var limit: Swift.Int?
                /// Токен для получения следующей страницы списка
                ///
                /// - Remark: Generated from `#/paths/receipts/GET/query/cursor`.
                public var cursor: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - paymentId: Фильтр по идентификатору платежа
                ///   - refundId: Фильтр по идентификатору возврата
                ///   - status: Фильтр по статусу чека. Возможные значения:
                ///   - limit: Количество чеков на странице. По умолчанию 20, максимум 100.
                ///   - cursor: Токен для получения следующей страницы списка
                public init(
                    paymentId: Swift.String? = nil,
                    refundId: Swift.String? = nil,
                    status: Operations.GetReceiptsList.Input.Query.StatusPayload? = nil,
                    limit: Swift.Int? = nil,
                    cursor: Swift.String? = nil
                ) {
                    self.paymentId = paymentId
                    self.refundId = refundId
                    self.status = status
                    self.limit = limit
                    self.cursor = cursor
                }
            }
            public var query: Operations.GetReceiptsList.Input.Query
            /// - Remark: Generated from `#/paths/receipts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetReceiptsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetReceiptsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetReceiptsList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetReceiptsList.Input.Query = .init(),
                headers: Operations.GetReceiptsList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/receipts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/receipts/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ReceiptsList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ReceiptsList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetReceiptsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetReceiptsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Список чеков
            ///
            /// - Remark: Generated from `#/paths//receipts/get(getReceiptsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetReceiptsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetReceiptsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//receipts/get(getReceiptsList)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//receipts/get(getReceiptsList)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//receipts/get(getReceiptsList)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Создание чека
    ///
    /// Создает чек для указанного платежа или возврата.
    ///
    /// Чек можно создать только при наличии успешного платежа или возврата.
    /// Если вы создаете чек для платежа, то передайте параметр payment_id.
    /// Если для возврата — refund_id.
    ///
    ///
    /// - Remark: HTTP `POST /receipts`.
    /// - Remark: Generated from `#/paths//receipts/post(createReceipt)`.
    public enum CreateReceipt {
        public static let id: Swift.String = "createReceipt"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/receipts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateReceipt.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateReceipt.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateReceipt.Input.Headers
            /// - Remark: Generated from `#/paths/receipts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/receipts/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateReceiptRequest)
            }
            public var body: Operations.CreateReceipt.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateReceipt.Input.Headers = .init(),
                body: Operations.CreateReceipt.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/receipts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/receipts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Receipt)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Receipt {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateReceipt.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateReceipt.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Чек успешно создан
            ///
            /// - Remark: Generated from `#/paths//receipts/post(createReceipt)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateReceipt.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateReceipt.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//receipts/post(createReceipt)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//receipts/post(createReceipt)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//receipts/post(createReceipt)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Информация о чеке
    ///
    /// Возвращает информацию о чеке по его уникальному идентификатору.
    ///
    /// Выдает информацию о чеке, включая его статус, данные о товарах, получателе и налогах.
    ///
    ///
    /// - Remark: HTTP `GET /receipts/{receipt_id}`.
    /// - Remark: Generated from `#/paths//receipts/{receipt_id}/get(getReceipt)`.
    public enum GetReceipt {
        public static let id: Swift.String = "getReceipt"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/receipts/{receipt_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Идентификатор чека
                ///
                /// - Remark: Generated from `#/paths/receipts/{receipt_id}/GET/path/receipt_id`.
                public var receiptId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - receiptId: Идентификатор чека
                public init(receiptId: Swift.String) {
                    self.receiptId = receiptId
                }
            }
            public var path: Operations.GetReceipt.Input.Path
            /// - Remark: Generated from `#/paths/receipts/{receipt_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetReceipt.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetReceipt.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetReceipt.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetReceipt.Input.Path,
                headers: Operations.GetReceipt.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/receipts/{receipt_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/receipts/{receipt_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Receipt)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Receipt {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetReceipt.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetReceipt.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Информация о чеке
            ///
            /// - Remark: Generated from `#/paths//receipts/{receipt_id}/get(getReceipt)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetReceipt.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetReceipt.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Неверные параметры запроса
            ///
            /// - Remark: Generated from `#/paths//receipts/{receipt_id}/get(getReceipt)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Ошибка аутентификации
            ///
            /// - Remark: Generated from `#/paths//receipts/{receipt_id}/get(getReceipt)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Ресурс не найден
            ///
            /// - Remark: Generated from `#/paths//receipts/{receipt_id}/get(getReceipt)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Слишком много запросов
            ///
            /// - Remark: Generated from `#/paths//receipts/{receipt_id}/get(getReceipt)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
